<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Time&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://softdevblog.com/"/>
  <updated>2018-10-24T15:41:13.400Z</updated>
  <id>http://softdevblog.com/</id>
  
  <author>
    <name>Tommy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://softdevblog.com/2018/10/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://softdevblog.com/2018/10/24/正则表达式/</id>
    <published>2018-10-24T15:04:05.000Z</published>
    <updated>2018-10-24T15:41:13.400Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p><code>Regular Expression</code> 即描述某种规则的表达式。</p><h2 id="字符组"><a href="#字符组" class="headerlink" title="字符组"></a>字符组</h2><h3 id="普通字符组"><a href="#普通字符组" class="headerlink" title="普通字符组"></a>普通字符组</h3><p>字符组（<code>Character Class</code>）是一组字符，表示 “<strong>在同一个位置可能出现的各种字符</strong>”</p><p>其写法是在一对方括号<code>[</code>和<code>]</code>之间列出所有可能出现的字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#只要字符串中包含数字、字符就可以匹配</span></span><br><span class="line">re.search(<span class="string">"[0123456789]"</span>,<span class="string">"2"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br></pre></td></tr></table></figure><p>默认情况下<code>re.search(pattern,string)</code>只判断<code>string</code>的某个子串能否由<code>pattern</code>匹配，为了测试整个<code>string</code>能否被<code>pattern</code>匹配，在<code>pattern</code>两端加上<code>^</code>和 <code>$</code>。它们并不匹配任何字符，只表示“定位到字符串的起始位置”和“定位到字符串的结束位置”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用^和$测试string被pattern完整匹配</span></span><br><span class="line"><span class="comment">#只要字符串中包含数字、字符就可以匹配</span></span><br><span class="line">re.search(<span class="string">"[0123456789]"</span>,<span class="string">"2"</span>) != <span class="keyword">None</span> <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">"[0123456789]"</span>,<span class="string">"a2"</span>) != <span class="keyword">None</span> <span class="comment">#=&gt;True</span></span><br><span class="line"><span class="comment">#整个字符串就是一个数字字符，才可以匹配</span></span><br><span class="line">re.search(<span class="string">"^[0123456789]$"</span>,<span class="string">"2"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">"^[0123456789]$"</span>,<span class="string">"12"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br></pre></td></tr></table></figure><p>字符组中的字符排列<strong>顺序</strong>并不影响字符组的功能，出现<strong>重复</strong>字符也不影响，但是并不推荐在字符组中出现重复字符。</p><a id="more"></a><p>例如上例中匹配数字就要把所有数字都列出来还是有些繁琐，为此正则表达式提供了<strong>范围表示法</strong>（<code>range</code>）,它更直观，能进一步简化字符组。</p><p>在字符组中<code>-</code>表示范围，一般是根据字符对应的码值（<code>Code Point</code>）也就是字符在对应码表中的编码数值来确定的。小的在前，大的在后，所以<code>[0-9]</code>正确，而<code>[9-0]</code>会报错。</p><p>在字符组中可以同时并列多个<code>-范围表示法</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#[0-9a-fA-F]准确判断十六进制字符</span></span><br><span class="line">re.search(<span class="string">"^[0-9a-fA-F]$"</span>,<span class="string">"0"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">"^[0-9a-fA-F]$"</span>,<span class="string">"c"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">"^[0-9a-fA-F]$"</span>,<span class="string">"i"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br></pre></td></tr></table></figure><p>还可以用转义序列<code>\xhex</code>来表示一个字符，其中<code>\x</code>是固定前缀。字符组中有时会出现这种表示法，它可以表现一些难以输入或者难以显示的字符。依靠这种表示法可以很方便的匹配所有的中文字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#[\x00-\x7F]准确判断ASCII字符</span></span><br><span class="line">re.search(<span class="string">"^[\x00-\x7F]$"</span>,<span class="string">"c"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">"^[\x00-\x7F]$"</span>,<span class="string">"I"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">"^[\x00-\x7F]$"</span>,<span class="string">"&lt;"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">"^[\x00-\x7F]$"</span>,<span class="string">"0"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br></pre></td></tr></table></figure><h3 id="元字符与转义"><a href="#元字符与转义" class="headerlink" title="元字符与转义"></a>元字符与转义</h3><p>字符组中的<code>-</code>并不能匹配横线字符，这类字符叫做<strong>元字符</strong>。<code>[</code>、<code>]</code>、<code>^</code>、<code>$</code>都算元字符。</p><p><strong>如果<code>-</code>紧邻字符组中的<code>[</code>那么它就是普通字符，其他情况都是元字符。</strong></p><p>取消特殊含义的做法是在元字符前加上反斜杠<code>\</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#作为普通字符</span></span><br><span class="line">re.search(<span class="string">"^[-09]$"</span>,<span class="string">"3"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">"^[-09]$"</span>,<span class="string">"-"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line"><span class="comment">#作为元字符</span></span><br><span class="line">re.search(<span class="string">"^[0-9]$"</span>,<span class="string">"3"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">"^[0-9]$"</span>,<span class="string">"-"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line"><span class="comment">#转义之后作为普通字符</span></span><br><span class="line">re.search(<span class="string">"^[0\\-9]$"</span>,<span class="string">"3"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">"^[0\\-9]$"</span>,<span class="string">"-"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br></pre></td></tr></table></figure><p>这段例子中，正则表达式是以字符串的方式传入的，而字符串本身也有关于转义的规定，所以要加<strong>两个反斜杠</strong><code>\\</code>。</p><p>针对这种问题<code>Python</code>提供了<strong>原生字符串（Raw String）</strong>,不需要考虑正则表达式之外的转义（只有<strong>双引号是例外</strong>，必须转义成<code>\&quot;</code>）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#原生字符串的使用</span></span><br><span class="line"><span class="string">r"^[0\-9]$"</span> == <span class="string">"^[0\\-9]$"</span><span class="comment">#=&gt;True</span></span><br><span class="line"><span class="comment">#原生字符串的转义要简单许多</span></span><br><span class="line">re.search(<span class="string">r"^[0\-9]$"</span>,<span class="string">"3"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^[0\-9]$"</span>,<span class="string">"-"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#]出现的位置不同含义不同</span></span><br><span class="line"><span class="comment">#未转义的]</span></span><br><span class="line">re.search(<span class="string">r"^[012]345$"</span>,<span class="string">"2345"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^[012]345]$"</span>,<span class="string">"5"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^[012]345]$"</span>,<span class="string">"]"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line"><span class="comment">#转义的]</span></span><br><span class="line">re.search(<span class="string">r"^[012\]345]$"</span>,<span class="string">"2345"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^[012\]345]$"</span>,<span class="string">"5"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^[012\]345]$"</span>,<span class="string">"]"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br></pre></td></tr></table></figure><p><strong>请注意，只有开方括号<code>[</code>需要转义，闭方括号<code>]</code>不用。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#取消其他元字符的特殊含义</span></span><br><span class="line">re.search(<span class="string">r"^[012]345]$"</span>,<span class="string">"3"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^[012\\]345]$"</span>,<span class="string">"3"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^[012]$"</span>,<span class="string">"[012]"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^\[012]$"</span>,<span class="string">"[012]"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br></pre></td></tr></table></figure><h3 id="排除型字符组"><a href="#排除型字符组" class="headerlink" title="排除型字符组"></a>排除型字符组</h3><p>排除型字符组（Negated Character Class）只是在<strong>方括号<code>[</code>之后紧跟一个脱字符`^</strong><code>，所以</code>[^0-9]<code>表示</code>0-9`之外的字符，也就是“非数字字符”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用排除型字符组</span></span><br><span class="line">re.search(<span class="string">r"^[^0-9][0-9]$"</span>,<span class="string">"A8"</span>) != <span class="keyword">None</span>                        <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^[^0-9][0-9]$"</span>,<span class="string">"x6"</span>) != <span class="keyword">None</span>                        <span class="comment">#=&gt;True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#排除型字符组必须匹配一个字符</span></span><br><span class="line">re.search(<span class="string">r"^[0-9][0-9]$"</span>,<span class="string">"8"</span>) != <span class="keyword">None</span>                          <span class="comment">#=&gt;False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#排除型字符组中，紧跟在"^"之后的一个"-"不是元字符</span></span><br><span class="line"><span class="comment">#匹配一个"-"、"0"、"9"之外的字符</span></span><br><span class="line">re.search(<span class="string">r"^[^0-9]$"</span>,<span class="string">"-"</span>) != <span class="keyword">None</span>                              <span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^[^-09]$"</span>,<span class="string">"8"</span>) != <span class="keyword">None</span>                              <span class="comment">#=&gt;True</span></span><br></pre></td></tr></table></figure><p>在排除型字符组中，<code>^</code>是一个元字符，但<strong>只有它紧跟在<code>[</code>之后时才是元字符</strong>，如果想表示这个字符组中可以出现<code>^</code>字符，不要让它紧挨着<code>[</code>，否则要转义。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#匹配4个字符之一:"0","^","1","2"</span></span><br><span class="line">re.search(<span class="string">r"^[0^12]$"</span>,<span class="string">"^"</span>) != <span class="keyword">None</span>                              <span class="comment">#=&gt;True</span></span><br><span class="line"><span class="comment">#"^"紧跟在"["之后，但经过转义变为普通字符，等于上一个表达式，不推荐。</span></span><br><span class="line">re.search(<span class="string">r"^[\^012]$"</span>,<span class="string">"^"</span>) != <span class="keyword">None</span>                             <span class="comment">#=&gt;True</span></span><br></pre></td></tr></table></figure><h3 id="字符组的简记法"><a href="#字符组的简记法" class="headerlink" title="字符组的简记法"></a>字符组的简记法</h3><p>字符组间记法（shorthands）：对于常用的表示数字字符、小写字母这类字符组提供的简单记法。</p><p>常见的有<code>\d</code>、<code>\w</code>、<code>\s</code>，其中<code>\d</code>等价于<code>[0-9]</code>，<code>d</code>代表“数字（digit）”；<code>\w</code>等价于<code>[0-9a-zA-Z_]</code>，<code>w</code>代表“单词（word）”；<code>\s</code>等价于<code>[ \t\r\n\v\f]</code>(第一个字符是空格)，<code>s</code>代表“空白字符（space）”。（<strong>这些等价前提是采用ASCII匹配规则，采用Unicode匹配规则就不对了</strong>）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果没有原声字符串\d就必须写作\\d</span></span><br><span class="line">re.search(<span class="string">r"^\d$"</span>,<span class="string">"8"</span>) != <span class="keyword">None</span>                                  <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\d$"</span>,<span class="string">"a"</span>) != <span class="keyword">None</span>                                  <span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^\w$"</span>,<span class="string">"8"</span>) != <span class="keyword">None</span>                                  <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\w$"</span>,<span class="string">"a"</span>) != <span class="keyword">None</span>                                  <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\w$"</span>,<span class="string">"_"</span>) != <span class="keyword">None</span>                                  <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\s$"</span>,<span class="string">" "</span>) != <span class="keyword">None</span>                                  <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\s$"</span>,<span class="string">"\t"</span>) != <span class="keyword">None</span>                                 <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\s$"</span>,<span class="string">"\n"</span>) != <span class="keyword">None</span>                                 <span class="comment">#=&gt;True</span></span><br></pre></td></tr></table></figure><p><strong><code>\w</code>能匹配下划线<code>_</code>。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字符组简记法与普通字符组混用</span></span><br><span class="line"><span class="comment">#用在普通字符组内部</span></span><br><span class="line">re.search(<span class="string">r"^[\da-zA-Z]$"</span>,<span class="string">"8"</span>) != <span class="keyword">None</span>                          <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^[\da-zA-Z]$"</span>,<span class="string">"a"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^[\da-zA-Z]$"</span>,<span class="string">"c"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用在排除型字符组内部</span></span><br><span class="line">re.search(<span class="string">r"^[^\w]$"</span>,<span class="string">"8"</span>) != <span class="keyword">None</span>                               <span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^[^\w]$"</span>,<span class="string">"_"</span>) != <span class="keyword">None</span>                               <span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^[^\w]$"</span>,<span class="string">","</span>) != <span class="keyword">None</span>                               <span class="comment">#=&gt;True</span></span><br></pre></td></tr></table></figure><p>相对于<code>\d</code>、<code>\w</code>和<code>\s</code>这三个普通字符组简记法，正则表达式也提供了对应的排除型字符组的简记法：<code>\D</code>、<code>\W</code>和<code>\S</code>——字母完全一样，只是改为大写。</p><p>这些简记法匹配字符互补：<code>\s</code>能匹配的字符，<code>\S</code>一定不能匹配，其他同理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#\d和\D</span></span><br><span class="line">re.search(<span class="string">r"^\d$"</span>,<span class="string">"8"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\d$"</span>,<span class="string">"a"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^\D$"</span>,<span class="string">"8"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^\D$"</span>,<span class="string">"a"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#\w和\W</span></span><br><span class="line">re.search(<span class="string">r"^\w$"</span>,<span class="string">"c"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\w$"</span>,<span class="string">"!"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^\W$"</span>,<span class="string">"c"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;False</span></span><br><span class="line">re,search(<span class="string">r"^\W$"</span>,<span class="string">"!"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#\s和\S</span></span><br><span class="line">re.search(<span class="string">r"^\s$"</span>,<span class="string">"\t"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\s$"</span>,<span class="string">"0"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^\S$"</span>,<span class="string">"\t"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^\S$"</span>,<span class="string">"0"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;True</span></span><br></pre></td></tr></table></figure><h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><h3 id="一般形式"><a href="#一般形式" class="headerlink" title="一般形式"></a>一般形式</h3><p>字符组只能匹配单个字符，为此正则表达式提供了<strong>量词（quantifier）</strong>，来支持匹配多个字符的功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#重复确定次数的量词</span></span><br><span class="line">re.search(<span class="string">r"^\d&#123;6&#125;$"</span>,<span class="string">"100859"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\d&#123;6&#125;$"</span>,<span class="string">"20103"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br></pre></td></tr></table></figure><p>量词还可以表示不确定的长度，其通用形式是<code>{m,n}</code>，其中<code>m</code>和<code>n</code>是两个数字（<strong>逗号之后绝不能有空格</strong>），它限定之前的元素能够出现的次数,<code>m</code>是下限，<code>n</code>是上限（均为闭区间）。如果不确定长度的上限，也可以省略，写成<code>\d{m,}</code>。量词限定一般都有明确的下限，如果没有，则默认为0。有些语言支持<code>{,n}</code>的记法，省略下限为0的情况，但这种用法并不是所有语言都通用的，<strong>最好使用<code>{0,n}</code>的记法</strong>。</p><table><thead><tr><th>量词</th><th>说明</th></tr></thead><tbody><tr><td>{n}</td><td>之前的元素必须出现n次</td></tr><tr><td>{m,n}</td><td>之前的元素最少出现m次，最多出现n次</td></tr><tr><td>{m,}</td><td>之前的元素最少出现m次，出现次数无上限</td></tr><tr><td>{0,n}</td><td>之前的元素可以不出现，也可以出现，最多出现n次（在某些语言中可以写为{,n}）</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#表示不确定长度的量词</span></span><br><span class="line">re.search(<span class="string">r"^\d&#123;4,6&#125;$"</span>,<span class="string">"123"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^\d&#123;4,5&#125;$"</span>,<span class="string">"1234"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\d&#123;4,6&#125;$"</span>,<span class="string">"123456"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\d&#123;4,6&#125;$"</span>,<span class="string">"1234567"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^\d&#123;4,&#125;$"</span>,<span class="string">"123"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^\d&#123;4,&#125;$"</span>,<span class="string">"1234"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\d&#123;4,&#125;"</span>,<span class="string">"123456"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\d&#123;0,6&#125;$"</span>,<span class="string">"12345"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\d&#123;0,6&#125;$"</span>,<span class="string">"123456"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\d&#123;0,6&#125;$"</span>,<span class="string">"1234567"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br></pre></td></tr></table></figure><h3 id="常用量词"><a href="#常用量词" class="headerlink" title="常用量词"></a>常用量词</h3><p><code>{m,n}</code>是通用形式的量词，正则表达式还有三个常用量词，分别是<code>+</code>、<code>?</code>、<code>*</code>。它们形态虽然不同于<code>{m,n}</code>,功能却相同。（可以理解为“量词简记法”）</p><table><thead><tr><th>常用量词</th><th>{m,n}等价形式</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>{0,}</td><td>可能出现，也可能不出现，出现次数没有上限</td></tr><tr><td>+</td><td>{1,}</td><td>至少出现1次，出现次数没有上限</td></tr><tr><td>?</td><td>{0,1}</td><td>至多出现1次，也可能不出现</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#量词?的应用</span></span><br><span class="line">re.search(<span class="string">r"^travell?er$"</span>,<span class="string">"traveler"</span>) != <span class="keyword">None</span>                   <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^travell?er$"</span>,<span class="string">"traveller"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#量词+的应用</span></span><br><span class="line">re.search(<span class="string">r"^&lt;[^&gt;]+&gt;$"</span>,<span class="string">"&lt;bold&gt;"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^&lt;[^&gt;]+&gt;$"</span>,<span class="string">"&lt;/table&gt;"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^&lt;[^&gt;]+&gt;$"</span>,<span class="string">"&lt;&gt;"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#量词*的使用</span></span><br><span class="line">re.search(<span class="string">r"^\"[^\"]*\"$"</span>,<span class="string">"\"some\""</span>) != <span class="keyword">None</span>                <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\"[^\"]*\"$"</span>,<span class="string">"\"\""</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br></pre></td></tr></table></figure><h3 id="点号"><a href="#点号" class="headerlink" title="点号"></a>点号</h3><p>一般文档都说点号可以匹配“任意字符”，但是换行符<code>\n</code>不能匹配，如果非要匹配”任意字符”，有两种办法：可以使用单行匹配；或者使用<code>[\s\S]</code>（也可以使用<code>[\w\W]</code>、<code>[\d\D]</code>）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#点号.的匹配</span></span><br><span class="line">re.search(<span class="string">r"^.$"</span>,<span class="string">"a"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^.$"</span>,<span class="string">"0"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^.$"</span>,<span class="string">"*"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#换行符的匹配</span></span><br><span class="line">re.search(<span class="string">r"^.$"</span>,<span class="string">"\n"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;False</span></span><br><span class="line"><span class="comment">#单行匹配</span></span><br><span class="line">re.search(<span class="string">r"(?s)^.$"</span>,<span class="string">"\n"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^[\s\S]$"</span>,<span class="string">"\n"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;True</span></span><br></pre></td></tr></table></figure><h3 id="贪婪与懒惰"><a href="#贪婪与懒惰" class="headerlink" title="贪婪与懒惰"></a>贪婪与懒惰</h3><p>当使用量词匹配字符串有时会出现意料之外的错误情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字符串的值是"quoted string"</span></span><br><span class="line">print(re.search(<span class="string">r"\".*\""</span>,<span class="string">"\"quoted string\""</span>).group())</span><br><span class="line"><span class="string">"quoted string"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串的值是"string" and another"</span></span><br><span class="line">print(re.search(<span class="string">r"\".*\""</span>,<span class="string">"\"quoted string\" and another\""</span>).group())</span><br><span class="line"><span class="string">"quoted string"</span> <span class="keyword">and</span> anothe<span class="string">r"</span></span><br></pre></td></tr></table></figure><p>我们只想匹配<code>&quot;quoted string&quot;</code>但是下面的语句匹配到了错误的<code>&quot;quoted string&quot; and another&quot;</code>，这是因为默认的量词匹配采用<strong>贪婪规则</strong>。就是在拿不准是否要匹配时，先尝试匹配，并且记下这个状态，以备将来”反悔”。这个“反悔”的过程叫做<strong>回溯（backtracking）</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#准确匹配双引号字符串，采用懒惰规则</span></span><br><span class="line">print(re.search(<span class="string">r"\".*?\""</span>,<span class="string">"\"quoted string\" and another\""</span>).group())</span><br><span class="line"><span class="string">"quoted string"</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>贪婪匹配量词</th><th>懒惰匹配量词</th><th>限定次数</th></tr></thead><tbody><tr><td>*</td><td>*?</td><td>可能不出现，也可能出现，出现次数没有上限</td></tr><tr><td>+</td><td>+?</td><td>至少出现1次，出现次数没有上限</td></tr><tr><td>?</td><td>??</td><td>至多出现1次，也可能不出现</td></tr><tr><td>{m,n}</td><td>{m,n}?</td><td>出现次数最少为m次，最多为n次</td></tr><tr><td>{m,}</td><td>{m,}?</td><td>出现次数最少为m次，没有上限</td></tr><tr><td>{,n}</td><td>{,n}?</td><td>可能不出现，也可能出现，最多出现n次</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">jsStr = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;script type="text/javascript"&gt;</span></span><br><span class="line"><span class="string">alert("1");</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;br /&gt;</span></span><br><span class="line"><span class="string">&lt;script type="text/javascript"&gt;</span></span><br><span class="line"><span class="string">alert("2");</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#贪婪匹配</span></span><br><span class="line">jsRegex = <span class="string">r"&lt;script type=\"text/javascript\"&gt;[\s\S]*&lt;/script&gt;"</span></span><br><span class="line">print(re.search(jsRegex,jsStr).group())</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&lt;script type="text/javascript"&gt;</span></span><br><span class="line"><span class="string">alert("1");</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;br /&gt;</span></span><br><span class="line"><span class="string">&lt;script type="text/javascript"&gt;</span></span><br><span class="line"><span class="string">alert("2");</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#懒惰匹配</span></span><br><span class="line">jsRegex = <span class="string">r"&lt;script type=\"text/javascript\"&gt;[\s\S]*?&lt;/script&gt;"</span></span><br><span class="line">print(re.search(jsRegex,jsStr).group())</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&lt;script type="text/javascript"&gt;</span></span><br><span class="line"><span class="string">alert("1");</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>各种量词的转义形式</p><table><thead><tr><th>量词</th><th>转义形式</th></tr></thead><tbody><tr><td>{n}</td><td>\{n}</td></tr><tr><td>{m,n}</td><td>\{m,n}</td></tr><tr><td>{m,}</td><td>\{m,}</td></tr><tr><td>{,n}</td><td>\{,n}</td></tr><tr><td>*</td><td>\*</td></tr><tr><td>+</td><td>\+</td></tr><tr><td>?</td><td>\?</td></tr><tr><td>*?</td><td>\*\?</td></tr><tr><td>+?</td><td>\+\?</td></tr><tr><td>??</td><td>\?\?</td></tr><tr><td>.</td><td>\.</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#忽略转义点号可能导致错误</span></span><br><span class="line"><span class="comment">#错误判断浮点数</span></span><br><span class="line">re.search(<span class="string">r"^\d+.\d+$"</span>,<span class="string">"3.14"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\d+.\d+$"</span>,<span class="string">"3a14"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#准确判断浮点数</span></span><br><span class="line">re.search(<span class="string">r"^\d+\.\d+$"</span>,<span class="string">"3.14"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\d+\.\d+$"</span>,<span class="string">"3a14"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br></pre></td></tr></table></figure><h2 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h2><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>使用括号<code>()</code>可以将一个字符、字符组或表达式包围起来作为一个整体，再用量词限定它们出现的次数，这种功能叫做<strong>分组</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用括号改变量词的作用元素</span></span><br><span class="line">re.search(<span class="string">r"^ab+$"</span>,<span class="string">"ab"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^ab+$"</span>,<span class="string">"abb"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^ab+$"</span>,<span class="string">"abab"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^(ab)+$"</span>,<span class="string">"ab"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^(ab)+$"</span>,<span class="string">"abb"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^(ab)+$"</span>,<span class="string">"abab"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#身份证号码的准确匹配</span></span><br><span class="line"><span class="string">r"^[1-9]\d&#123;14&#125;(\d&#123;2&#125;[0-9xX])?$"</span></span><br></pre></td></tr></table></figure><h3 id="多选结构"><a href="#多选结构" class="headerlink" title="多选结构"></a>多选结构</h3><p>多选结构的形式是<code>(...|…)</code>,在括号内以竖线<code>|</code>分隔开多个子表达式，这些表达式也叫<strong>多选分支（option）</strong>；在一个多选结构内，多选分支的数目没有限制。在匹配时，整个多选结构被视为单个元素，只要其中某个子表达式能够匹配，整个多选结构的匹配就成功了；如果所有子表达式都不能匹配，则整个多选结构匹配失败。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用多选结构匹配身份证号码</span></span><br><span class="line"><span class="string">r"^([1-9\d&#123;14&#125;|[1-9]&#123;16&#125;[0-9xX]])$"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#准确匹配0-255之间的字符串</span></span><br><span class="line"><span class="string">r"^([0-9]|[0-9]&#123;2&#125;|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$"</span></span><br></pre></td></tr></table></figure><p>多选结构的补充：</p><p>第一、多选结构一般会同时使用括号<code>()</code>和竖线<code>|</code>；但是没有括号<code>()</code>，只出现竖线<code>|</code>，仍然是多选结构。</p><p>第二、多选结构并不等于字符组。字符组匹配要比多选结构效率高很多，字符组只能匹配单个字符，多选结构的每个分支长度没有限制。</p><p>第三、多选结构应当避免某段文字可以被多个分支同时匹配的情况，这将大大增加回溯的计算量，影响效率。如果遇到多个分支都能匹配的字符串，大多数语言优先匹配左侧分支。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#多选结构的匹配顺序</span></span><br><span class="line">re.search(<span class="string">r"^jeffrey|jeff$"</span>,<span class="string">"jeffrey"</span>).group()</span><br><span class="line"><span class="string">'jeffrey'</span></span><br><span class="line">re.search(<span class="string">r"^jeff|jeffrey$"</span>,<span class="string">"jeffrey"</span>).group()</span><br><span class="line"><span class="string">'jeff'</span></span><br></pre></td></tr></table></figure><h3 id="引用分组"><a href="#引用分组" class="headerlink" title="引用分组"></a>引用分组</h3><p>使用括号之后，正则表达式会保存每个分组真正匹配的文本，等到匹配完成后，通过<strong>group(num)</strong>之类的方法”引用”分组在匹配时捕获的内容。其中<em>num</em>表示对应括号的编号，<strong>无论括号如何嵌套，分组编号都是根据开括号出现的顺序来计数的</strong>；开括号是从左到右数起第多少个开括号，整个括号分组的编号就是多少。编号从1开始计数，不过也有0号分组，它是默认存在的，对应整个表达式匹配的文本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#引用捕获分组</span></span><br><span class="line">re.search(<span class="string">r"(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)"</span>,<span class="string">"2018-10-24"</span>).group()</span><br><span class="line"><span class="string">'2018-10-24'</span></span><br><span class="line">re.search(<span class="string">r"(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)"</span>,<span class="string">"2018-10-24"</span>).group(<span class="number">0</span>)</span><br><span class="line"><span class="string">'2018-10-24'</span></span><br><span class="line">re.search(<span class="string">r"(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)"</span>,<span class="string">"2018-10-24"</span>).group(<span class="number">1</span>)</span><br><span class="line"><span class="string">'2018'</span></span><br><span class="line">re.search(<span class="string">r"(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)"</span>,<span class="string">"2018-10-24"</span>).group(<span class="number">2</span>)</span><br><span class="line"><span class="string">'10'</span></span><br><span class="line">re.search(<span class="string">r"(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)"</span>,<span class="string">"2018-10-24"</span>).group(<span class="number">3</span>)</span><br><span class="line"><span class="string">'24'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#嵌套的括号</span></span><br><span class="line">nestedGroupingRegex = <span class="string">r"(((\d&#123;4&#125;)-(\d&#123;2&#125;))-(\d&#123;2&#125;))"</span></span><br><span class="line">re.search(nestedGroupingRegex,<span class="string">"2018-10-24"</span>).group(<span class="number">0</span>)</span><br><span class="line"><span class="string">'2018-10-24'</span></span><br><span class="line">re.search(nestedGroupingRegex,<span class="string">"2018-10-24"</span>).group(<span class="number">1</span>)</span><br><span class="line"><span class="string">'2018-10-24'</span></span><br><span class="line">re.search(nestedGroupingRegex,<span class="string">"2018-10-24"</span>).group(<span class="number">2</span>)</span><br><span class="line"><span class="string">'2018-10'</span></span><br><span class="line">re.search(nestedGroupingRegex,<span class="string">"2018-10-24"</span>).group(<span class="number">3</span>)</span><br><span class="line"><span class="string">'2018'</span></span><br><span class="line">re.search(nestedGroupingRegex,<span class="string">"2018-10-24"</span>).group(<span class="number">4</span>)</span><br><span class="line"><span class="string">'10'</span></span><br><span class="line">re.search(nestedGroupingRegex,<span class="string">"2018-10-24"</span>).group(<span class="number">5</span>)</span><br><span class="line"><span class="string">'24'</span></span><br></pre></td></tr></table></figure><p>容易错误的情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#容易弄错的分组的结构</span></span><br><span class="line">re.search(<span class="string">r"^(\d)&#123;4&#125;-(\d&#123;2&#125;)-(\d&#123;2&#125;)$"</span>,<span class="string">"2018-10-24"</span>).group(<span class="number">1</span>)</span><br><span class="line"><span class="string">'8'</span></span><br></pre></td></tr></table></figure><p>这个表达式中编号为1的括号是<code>(\d)</code>，其中<code>\d</code>是“匹配一个数字字符“的子表达式，因为之后有量词<code>{4}</code>，所以整个括号作为单个元素，要重复4次，而且编号都是1；于是每重复一次，就要更新一次匹配结果。所以在匹配过程中，编号为1的分组匹配文本的值，依次是<code>2</code>、<code>0</code>、<code>1</code>、<code>0</code>，最后的结果是0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#正则表达式的替换</span></span><br><span class="line">re.sub(<span class="string">r"[a-z]"</span>,<span class="string">" "</span>,<span class="string">"1a2b3c"</span>)</span><br><span class="line"><span class="string">'1 2 3 '</span></span><br><span class="line"><span class="comment">#在替换中使用分组</span></span><br><span class="line">re.sub(<span class="string">r"(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)"</span>,<span class="string">r"\2/\3/\1"</span>,<span class="string">"2018-10-24"</span>)</span><br><span class="line"><span class="string">'10/24/2018'</span></span><br><span class="line">re.sub(<span class="string">r"(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)"</span>,<span class="string">r"\1年\2月\3日"</span>,<span class="string">"2018-10-24"</span>)</span><br><span class="line"><span class="string">'2018年10月24日'</span></span><br></pre></td></tr></table></figure><h3 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h3><p><strong>反向引用（back-reference）</strong>它允许在正则表达式内部引用之前的捕获分组匹配的文本（也就是左侧），其形式也是<em>\num</em>,其中<em>num</em>表示所引用分组的编号，编号规则与之前介绍的相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用反向引用匹配重复字符</span></span><br><span class="line">re.search(<span class="string">r"^([a-z])\1$"</span>,<span class="string">"aa"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^([a-z])\1$"</span>,<span class="string">"ac"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用反向引用匹配成对的tag</span></span><br><span class="line">pairedTagRegex = <span class="string">r"^&lt;([^&gt;]+)[\s\S]*?&lt;/\1&gt;$"</span></span><br><span class="line">re.search(pairedTagRegex,<span class="string">"&lt;h1&gt;title&lt;/h1&gt;"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(pairedTagRegex,<span class="string">"&lt;h1&gt;title&lt;/bold&gt;"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用反向引用匹配更复杂的成对tag</span></span><br><span class="line">pairedTagRegex = <span class="string">r"^&lt;([a-zA-Z0-9]+)(\s[^&gt;]+)?&gt;[\s\S]*?&lt;/\1&gt;$"</span></span><br><span class="line">re.search(pairedTagRegex,<span class="string">"&lt;h1&gt;title&lt;/h1&gt;"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(pairedTagRegex,<span class="string">"&lt;span class=\"class1\"&gt;text&lt;/span&gt;"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(pairedTagRegex,<span class="string">"&lt;h1&gt;title&lt;/bold&gt;"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br></pre></td></tr></table></figure><p>反向引用重复的是对应捕获分组匹配的文本，而不是之前的表达式；也就是说，反向引用的<strong>是由之前表达式决定的具体文本</strong>，而<strong>不是符合某种规则的位置文本</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#匹配IP地址的正则表达式</span></span><br><span class="line"><span class="comment">#匹配其中一段的表达式</span></span><br><span class="line">segment = <span class="string">r"(0&#123;0,2&#125;[0-9]|0?[0-9]&#123;2&#125;|1[0-9][0-9]|2[0-4][0-9]|25[0-5])"</span></span><br><span class="line"><span class="comment">#正确的表达式</span></span><br><span class="line">idAddressRegex = <span class="string">r"("</span> + segment + <span class="string">r"\.)&#123;3&#125;"</span> + segment</span><br><span class="line"><span class="comment">#错误的表达式</span></span><br><span class="line">idAddressRegex = segment + <span class="string">r"\.\1.\1.\1"</span></span><br></pre></td></tr></table></figure><h3 id="各种引用的记法"><a href="#各种引用的记法" class="headerlink" title="各种引用的记法"></a>各种引用的记法</h3><table><thead><tr><th>语言</th><th>表达式中的反向引用</th><th>替换中的反向引用</th></tr></thead><tbody><tr><td>.NET</td><td>\num</td><td>$num</td></tr><tr><td>Java</td><td>\num</td><td>$num</td></tr><tr><td>JavaScript</td><td>$num</td><td>$num</td></tr><tr><td>PHP</td><td>\num</td><td>\num或$num(PHP4.0.4以上版本)</td></tr><tr><td>Python</td><td>\num</td><td>\num</td></tr><tr><td>Ruby</td><td>\num</td><td>\num</td></tr></tbody></table><p>一般来说，$num要好于\num。原因在于，<strong>\$0</strong>可以准确表示“第0个分组”，而<strong>\0</strong>则不行，因为不少语言的字符串中，<strong>\num</strong>本身是一个有意义的转义序列，它表示值为<strong>num</strong>的ASCII字符，所以<strong>\0</strong>会被解释为“ASCII编码为0的字符”。但是反向引用不存在这个问题，因为不能在正则表达式还没匹配结束时，就用<strong>\0</strong>引用整个表达式匹配的文本。</p><p>但是无论是<strong>\num</strong>还是<strong>$num</strong>，都有可能遇到二义性的问题：如果出现了<strong>\10</strong>（或者<strong>$10</strong>），它到底是表示第10个捕获分组，还是第1个捕获分组之后跟着一个字符0？</p><p>Python将<strong>\10</strong>解释成“第10个捕获分组匹配的文本”，如果想表示第1个分组之后跟一个0，需要消除二义性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用g&lt;n&gt;消除二义性</span></span><br><span class="line">re.sub(<span class="string">r"(\d)"</span>,<span class="string">r"\g&lt;1&gt;0"</span>,<span class="string">"123"</span>)</span><br><span class="line"><span class="string">'102030'</span></span><br></pre></td></tr></table></figure><p>Python和PHP的规定明确，所以避免了<strong>\num</strong>的二义性；Java、Ruby、Javascript这样规定<strong>\num</strong>，如果一位数，则引用对应的捕获分组；如果是两位数且存在对应的捕获分组时，引用对应的捕获分组，如果不存在则引用一位数编号的捕获分组。这样如果存在编号为10的捕获分组，无法用<strong>\10</strong>表示“编号为1的捕获分组和字符0”，如果在开发中遇到这个问题，现有规则下无解，但可以使用明明分组解决此问题。</p><h3 id="命名分组"><a href="#命名分组" class="headerlink" title="命名分组"></a>命名分组</h3><p>为了解决捕获分组数字编号不够直观和会引起冲突的问题，一些语言提供了<strong>命名分组（named grouping）</strong>。</p><p>在Python中用<code>(?P&lt;name&gt;regex)</code>来分组，其中的<em>name</em>是赋予这个分组的名字，regex则是分组内的正则表达式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#命名分组捕获</span></span><br><span class="line">namedRegex = <span class="string">r"(?P&lt;year&gt;\d&#123;4&#125;)-(?P&lt;month&gt;\d&#123;2&#125;)-(?P&lt;day&gt;\d&#123;2&#125;)"</span></span><br><span class="line">result = re.search(namedRegex, <span class="string">"2018-10-24"</span>)</span><br><span class="line">print(result.group(<span class="string">"year"</span>))</span><br><span class="line"><span class="number">2018</span></span><br><span class="line">print(result.group(<span class="string">"month"</span>))</span><br><span class="line"><span class="number">10</span></span><br><span class="line">print(result.group(<span class="string">"day"</span>))</span><br><span class="line"><span class="number">24</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#命名分组捕获时仍然保留了数字编号</span></span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line"><span class="number">2018</span></span><br><span class="line">print(result.group(<span class="number">2</span>))</span><br><span class="line"><span class="number">10</span></span><br><span class="line">print(result.group(<span class="number">3</span>))</span><br><span class="line"><span class="number">24</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#命名分组的引用方法</span></span><br><span class="line">re.search(<span class="string">r"^(?P&lt;char&gt;[a-z])(?P=char)$"</span>,<span class="string">"aa"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.sub(<span class="string">"(?P&lt;digit&gt;\d)"</span>,<span class="string">r"\g&lt;digit&gt;0"</span>,<span class="string">"123"</span>)</span><br><span class="line"><span class="string">'102030'</span></span><br></pre></td></tr></table></figure><p>不同语言中命名分组的记法</p><table><thead><tr><th>语言</th><th>分组记法</th><th>表达式中的引用记法</th><th>替换时的引用记法</th></tr></thead><tbody><tr><td>.NET</td><td>(?<name>…)</name></td><td>\k<name></name></td><td>${name}</td></tr><tr><td>Java7开始支持</td><td>(?<name>…)</name></td><td>\k<name></name></td><td>${name}</td></tr><tr><td>PHP</td><td>(?P<name>…)</name></td><td>(?P=name)</td><td>不支持，只能使用\${<em>num</em>},其中<em>num</em><br>为对应分组的数字编号</td></tr><tr><td>Python</td><td>(?P<name>…)</name></td><td>(?P=name)</td><td>\g<name></name></td></tr><tr><td>Ruby</td><td>(?<name>…)</name></td><td>\k<name></name></td><td>\k<name></name></td></tr></tbody></table><h3 id="非捕获分组"><a href="#非捕获分组" class="headerlink" title="非捕获分组"></a>非捕获分组</h3><p>在使用分组时，只要出现了括号，正则表达式在匹配时就会把括号内的子表达式存储起来，提供引用。如果不需要引用，保存这些信息无疑会影响正则表达式的性能；如果表达式比较复杂，要处理的文本又很多，更可能严重影响性能。</p><p>为解决这种问题，提供了<strong>非捕获分组</strong>（non-capturing group），非捕获分组类似普通分组，只是在开括号后紧跟一个问号和冒号<code>(?:...)</code>，这样的括号叫做非捕获型括号。在引用分组时，分组的编号同样会按开括号的顺序从左到右递增，只不过<strong>必须以捕获分组为准，非捕获分组会掠过</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">re.search(<span class="string">r"(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)"</span>,<span class="string">"2018-10-24"</span>).group(<span class="number">1</span>)</span><br><span class="line"><span class="string">'2018'</span></span><br><span class="line">re.search(<span class="string">r"(?:\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)"</span>,<span class="string">"2018-10-24"</span>).group(<span class="number">1</span>)</span><br><span class="line"><span class="string">'10'</span></span><br></pre></td></tr></table></figure><h3 id="转义-1"><a href="#转义-1" class="headerlink" title="转义"></a>转义</h3><p>括号的转义必须转义与括号有关的所有元字符包括<code>(</code>、<code>)</code>和<code>|</code>。因为括号非常重要，所以无论时开括号还是闭括号，只要出现，正则表达式就会尝试寻找整个括号，如果只转义了开括号而没有转义闭括号，一般会报告”括号不匹配”的错误。另外，多选结构中的<code>|</code>也必须转义。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#括号的转义</span></span><br><span class="line">re.search(<span class="string">r"^\(a\)$"</span>,<span class="string">"(a)"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\(a)$"</span>,<span class="string">"(a)"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#未转义|</span></span><br><span class="line">re.search(<span class="string">r"^(\(a|b\))$"</span>,<span class="string">"(a|b)"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^(\(a\|b\))$"</span>,<span class="string">"(a|b)"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br></pre></td></tr></table></figure><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><p>正则表达式中的大多数的结构匹配的文本会出现在最终的匹配结果中，但是有些结构并不真正匹配文本，而只负责判断某个位置左/右侧的文本是否符合要求，这种结构被称为<strong>断言（assertion）</strong>。常见的断言有三类：<strong>单词边界、行起始/结束位置、环视</strong>。</p><p><em>待补充</em></p><p><strong>个人根据《正则指引》内容总结记录，侵删！！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Regular Expression&lt;/code&gt; 即描述某种规则的表达式。&lt;/p&gt;
&lt;h2 id=&quot;字符组&quot;&gt;&lt;a href=&quot;#字符组&quot; class=&quot;headerlink&quot; title=&quot;字符组&quot;&gt;&lt;/a&gt;字符组&lt;/h2&gt;&lt;h3 id=&quot;普通字符组&quot;&gt;&lt;a href=&quot;#普通字符组&quot; class=&quot;headerlink&quot; title=&quot;普通字符组&quot;&gt;&lt;/a&gt;普通字符组&lt;/h3&gt;&lt;p&gt;字符组（&lt;code&gt;Character Class&lt;/code&gt;）是一组字符，表示 “&lt;strong&gt;在同一个位置可能出现的各种字符&lt;/strong&gt;”&lt;/p&gt;
&lt;p&gt;其写法是在一对方括号&lt;code&gt;[&lt;/code&gt;和&lt;code&gt;]&lt;/code&gt;之间列出所有可能出现的字符。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#只要字符串中包含数字、字符就可以匹配&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;re.search(&lt;span class=&quot;string&quot;&gt;&quot;[0123456789]&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;) != &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;				&lt;span class=&quot;comment&quot;&gt;#=&amp;gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;默认情况下&lt;code&gt;re.search(pattern,string)&lt;/code&gt;只判断&lt;code&gt;string&lt;/code&gt;的某个子串能否由&lt;code&gt;pattern&lt;/code&gt;匹配，为了测试整个&lt;code&gt;string&lt;/code&gt;能否被&lt;code&gt;pattern&lt;/code&gt;匹配，在&lt;code&gt;pattern&lt;/code&gt;两端加上&lt;code&gt;^&lt;/code&gt;和 &lt;code&gt;$&lt;/code&gt;。它们并不匹配任何字符，只表示“定位到字符串的起始位置”和“定位到字符串的结束位置”。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#使用^和$测试string被pattern完整匹配&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#只要字符串中包含数字、字符就可以匹配&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;re.search(&lt;span class=&quot;string&quot;&gt;&quot;[0123456789]&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;) != &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt; 				&lt;span class=&quot;comment&quot;&gt;#=&amp;gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;re.search(&lt;span class=&quot;string&quot;&gt;&quot;[0123456789]&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;a2&quot;&lt;/span&gt;) != &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt; 				&lt;span class=&quot;comment&quot;&gt;#=&amp;gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#整个字符串就是一个数字字符，才可以匹配&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;re.search(&lt;span class=&quot;string&quot;&gt;&quot;^[0123456789]$&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;) != &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;				&lt;span class=&quot;comment&quot;&gt;#=&amp;gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;re.search(&lt;span class=&quot;string&quot;&gt;&quot;^[0123456789]$&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;12&quot;&lt;/span&gt;) != &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;			&lt;span class=&quot;comment&quot;&gt;#=&amp;gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;字符组中的字符排列&lt;strong&gt;顺序&lt;/strong&gt;并不影响字符组的功能，出现&lt;strong&gt;重复&lt;/strong&gt;字符也不影响，但是并不推荐在字符组中出现重复字符。&lt;/p&gt;
    
    </summary>
    
      <category term="基础知识" scheme="http://softdevblog.com/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="通用技术" scheme="http://softdevblog.com/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="正则表达式" scheme="http://softdevblog.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="通用技术" scheme="http://softdevblog.com/tags/%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
