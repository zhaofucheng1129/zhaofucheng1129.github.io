<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Time&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://softdevblog.com/"/>
  <updated>2019-05-07T07:40:05.109Z</updated>
  <id>http://softdevblog.com/</id>
  
  <author>
    <name>Tommy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PromiseKit源码分析</title>
    <link href="http://softdevblog.com/2019/05/07/PromiseKit%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://softdevblog.com/2019/05/07/PromiseKit源码分析/</id>
    <published>2019-05-07T07:36:13.000Z</published>
    <updated>2019-05-07T07:40:05.109Z</updated>
    
    <content type="html"><![CDATA[<p>源码版本：6.8.4</p><p>首先从官方实例开始</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PromiseKit</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">promise3</span><span class="params">()</span></span> -&gt; <span class="type">Promise</span>&lt;<span class="type">Int</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> after(.seconds(<span class="number">1</span>)).<span class="built_in">map</span>&#123; <span class="number">3</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">firstly &#123;</span><br><span class="line">    <span class="type">Promise</span>.value(<span class="number">1</span>)</span><br><span class="line">&#125;.<span class="built_in">map</span> &#123; <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">    <span class="number">2</span></span><br><span class="line">&#125;.then &#123; <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">    promise3()</span><br><span class="line">&#125;.done &#123;</span><br><span class="line">    <span class="built_in">print</span>($<span class="number">0</span>)  <span class="comment">// =&gt; 3</span></span><br><span class="line">&#125;.<span class="keyword">catch</span> &#123; error <span class="keyword">in</span></span><br><span class="line">    <span class="comment">// only happens for errors</span></span><br><span class="line">&#125;.finally &#123;</span><br><span class="line">    <span class="type">PlaygroundPage</span>.current.finishExecution()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使Playground等待异步操作执行完在退出</span></span><br><span class="line"><span class="type">PlaygroundPage</span>.current.needsIndefiniteExecution = <span class="literal">true</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="firstly"><a href="#firstly" class="headerlink" title="firstly"></a>firstly</h2><p>是一个全局函数</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">firstly</span>&lt;U: Thenable&gt;<span class="params">(execute body: <span class="params">()</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">U</span>) -&gt; <span class="type">Promise</span>&lt;<span class="type">U</span>.<span class="type">T</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> rp = <span class="type">Promise</span>&lt;<span class="type">U</span>.<span class="type">T</span>&gt;(.pending)</span><br><span class="line">        <span class="keyword">try</span> body().pipe(to: rp.box.seal)</span><br><span class="line">        <span class="keyword">return</span> rp</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Promise</span>(error: error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接受一个返回<code>Thenable</code>的闭包，返回一个<code>Promise&lt;U.T&gt;</code>对于官方实例返回的就是<code>Promise&lt;Int&gt;</code></p><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Promise</span>&lt;<span class="title">T</span>&gt;: <span class="title">Thenable</span>, <span class="title">CatchMixin</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> box: <span class="type">Box</span>&lt;<span class="type">Result</span>&lt;<span class="type">T</span>&gt;&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">init</span>(box: <span class="type">SealedBox</span>&lt;<span class="type">Result</span>&lt;<span class="type">T</span>&gt;&gt;) &#123;</span><br><span class="line">        <span class="keyword">self</span>.box = box</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">value</span>(<span class="title">_</span> <span class="title">value</span>: <span class="title">T</span>) -&gt; <span class="title">Promise</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Promise</span>(box: <span class="type">SealedBox</span>(value: .fulfilled(value)))</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">init</span>&lt;<span class="type">U</span>: <span class="type">Thenable</span>&gt;(<span class="number">_</span> bridge: <span class="type">U</span>) <span class="keyword">where</span> <span class="type">U</span>.<span class="type">T</span> == <span class="type">T</span> &#123;</span><br><span class="line">        box = <span class="type">EmptyBox</span>()</span><br><span class="line">        bridge.pipe(to: box.seal)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于<code>Promise</code>先看这个几个方法，首先内部维护了一个<code>Box</code>范型对象，构造器或者类方法都会对<code>box</code>属性赋值，但是传递的参数不同，下面看看<code>Box</code>是什么。</p><h2 id="Box"><a href="#Box" class="headerlink" title="Box"></a>Box</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">inspect</span><span class="params">()</span></span> -&gt; <span class="type">Sealant</span>&lt;<span class="type">T</span>&gt; &#123; <span class="built_in">fatalError</span>() &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">inspect</span><span class="params">(<span class="number">_</span>: <span class="params">(Sealant&lt;T&gt;)</span></span></span> -&gt; <span class="type">Void</span>) &#123; <span class="built_in">fatalError</span>() &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">seal</span><span class="params">(<span class="number">_</span>: T)</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类可以理解为一个抽象类，由于Swift不支持抽象类，所以用这种抛出错误的方式强制用户不可以直接调用，让子类重写。（PS：为啥不用协议呢？～不理解）看看子类实现：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SealedBox</span>&lt;<span class="title">T</span>&gt;: <span class="title">Box</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> value: <span class="type">T</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(value: <span class="type">T</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.value = value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">inspect</span><span class="params">()</span></span> -&gt; <span class="type">Sealant</span>&lt;<span class="type">T</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> .resolved(value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看类的命名是一个密封了的盒子，就是已经得到确定值的<code>Box</code>，<code>inspect</code>方法返回一个<code>Enum</code>类型携带了这个值</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Sealant</span>&lt;<span class="title">R</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> pending(<span class="type">Handlers</span>&lt;<span class="type">R</span>&gt;)</span><br><span class="line">    <span class="keyword">case</span> resolved(<span class="type">R</span>) <span class="comment">//携带的确定值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一个子类实现：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Handlers</span>&lt;<span class="title">R</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bodies: [(<span class="type">R</span>) -&gt; <span class="type">Void</span>] = []</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(<span class="number">_</span> item: @escaping<span class="params">(R)</span></span></span> -&gt; <span class="type">Void</span>) &#123; bodies.append(item) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmptyBox</span>&lt;<span class="title">T</span>&gt;: <span class="title">Box</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//一个枚举关联值是Handlers，默认是个空数组，数组内部元素是你期待类型操作的闭包</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> sealant = <span class="type">Sealant</span>&lt;<span class="type">T</span>&gt;.pending(.<span class="keyword">init</span>())</span><br><span class="line">    <span class="comment">// 一个异步队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> barrier = <span class="type">DispatchQueue</span>(label: <span class="string">"org.promisekit.barrier"</span>, attributes: .concurrent)</span><br><span class="line">  </span><br><span class="line"><span class="comment">//改变了sealant的类型，并且拿到持有的操作数组，将得到的值传递给数组中的闭包执行</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">seal</span><span class="params">(<span class="number">_</span> value: T)</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> handlers: <span class="type">Handlers</span>&lt;<span class="type">T</span>&gt;!</span><br><span class="line">        barrier.sync(flags: .barrier) &#123;</span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">case</span> .pending(<span class="keyword">let</span> _handlers) = <span class="keyword">self</span>.sealant <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span>  <span class="comment">// already fulfilled!</span></span><br><span class="line">            &#125;</span><br><span class="line">            handlers = _handlers</span><br><span class="line">            <span class="keyword">self</span>.sealant = .resolved(value)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//FIXME we are resolved so should `pipe(to:)` be called at this instant, “thens are called in order” would be invalid</span></span><br><span class="line">        <span class="comment">//NOTE we don’t do this in the above `sync` because that could potentially deadlock</span></span><br><span class="line">        <span class="comment">//THOUGH since `then` etc. typically invoke after a run-loop cycle, this issue is somewhat less severe</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> handlers = handlers &#123;</span><br><span class="line">            handlers.bodies.forEach&#123; $<span class="number">0</span>(value) &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//TODO solution is an unfortunate third state “sealed” where then's get added</span></span><br><span class="line">        <span class="comment">// to a separate handler pool for that state</span></span><br><span class="line">        <span class="comment">// any other solution has potential races</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//同步读取内部的sealant的值返回</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">inspect</span><span class="params">()</span></span> -&gt; <span class="type">Sealant</span>&lt;<span class="type">T</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">var</span> rv: <span class="type">Sealant</span>&lt;<span class="type">T</span>&gt;!</span><br><span class="line">        barrier.sync &#123;</span><br><span class="line">            rv = <span class="keyword">self</span>.sealant</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rv</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//这个方法有点复杂 会被Promise的pipe方法调用</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">inspect</span><span class="params">(<span class="number">_</span> body: <span class="params">(Sealant&lt;T&gt;)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> sealed = <span class="literal">false</span></span><br><span class="line">        barrier.sync(flags: .barrier) &#123;</span><br><span class="line">            <span class="keyword">switch</span> sealant &#123;</span><br><span class="line">            <span class="keyword">case</span> .pending:</span><br><span class="line">                <span class="comment">// body will append to handlers, so we must stay barrier’d</span></span><br><span class="line">                body(sealant)</span><br><span class="line">            <span class="keyword">case</span> .resolved:</span><br><span class="line">                sealed = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> sealed &#123;</span><br><span class="line">            <span class="comment">// we do this outside the barrier to prevent potential deadlocks</span></span><br><span class="line">            <span class="comment">// it's safe because we never transition away from this state</span></span><br><span class="line">            body(sealant)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合<code>pipe</code>方法来分析一下<code>inspect</code>到底做了什么，<code>pipe</code>方法如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// - See: `Thenable.pipe`</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">pipe</span><span class="params">(to: @escaping<span class="params">(Result&lt;T&gt;)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> box.inspect() &#123;</span><br><span class="line">    <span class="keyword">case</span> .pending:</span><br><span class="line">        box.inspect &#123;</span><br><span class="line">            <span class="keyword">switch</span> $<span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> .pending(<span class="keyword">let</span> handlers):</span><br><span class="line">                handlers.append(to)</span><br><span class="line">            <span class="keyword">case</span> .resolved(<span class="keyword">let</span> value):</span><br><span class="line">                to(value)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">case</span> .resolved(<span class="keyword">let</span> value):</span><br><span class="line">        to(value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>pipe</code>调用<code>inspect</code>传递了一个闭包，我们一层一层展开它就变成这个样子</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">inspect</span><span class="params">(<span class="number">_</span> body: <span class="params">(Sealant&lt;T&gt;)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> sealed = <span class="literal">false</span></span><br><span class="line">        barrier.sync(flags: .barrier) &#123;</span><br><span class="line">            <span class="keyword">switch</span> sealant &#123;</span><br><span class="line">            <span class="keyword">case</span> .pending:</span><br><span class="line">                <span class="comment">// body will append to handlers, so we must stay barrier’d</span></span><br><span class="line">                <span class="comment">//body(sealant)</span></span><br><span class="line">              <span class="keyword">switch</span> sealant &#123;</span><br><span class="line">                <span class="keyword">case</span> .pending(<span class="keyword">let</span> handlers):</span><br><span class="line">                    <span class="comment">// to是下一个操作的闭包 添加到了box关联的数组中</span></span><br><span class="line">                    handlers.append(to)</span><br><span class="line">                <span class="keyword">case</span> .resolved(<span class="keyword">let</span> value):</span><br><span class="line">                    to(value) </span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> .resolved:</span><br><span class="line">                sealed = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> sealed &#123;</span><br><span class="line">            <span class="comment">// we do this outside the barrier to prevent potential deadlocks</span></span><br><span class="line">            <span class="comment">// it's safe because we never transition away from this state</span></span><br><span class="line">            body(sealant)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="firstly执行流程总结"><a href="#firstly执行流程总结" class="headerlink" title="firstly执行流程总结"></a>firstly执行流程总结</h2><p>首先<code>fristly</code>全局方法会将我们传递进去的<code>Promise</code>调用<code>pipe</code>连接到一个<code>pending</code>的<code>Promise</code>，由于<code>pipe</code>接收一个闭包参数，正好<code>Box</code>类内部的<code>func seal(_: T) {}</code>就符合这个闭包，所以传递<code>pipe</code>就接受了<code>seal</code>作为参数，所以到目前为止</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firstly &#123;</span><br><span class="line">    <span class="type">Promise</span>.value(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以转换成下面这样</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Promise</span>.value(<span class="number">1</span>).pipe(to:<span class="type">EmptyBox</span>().seal)</span><br></pre></td></tr></table></figure><p><code>Promise.value(1)</code>创建的<code>Promise</code>内部会维护一个<code>resolved</code>类型的<code>Box</code>，接着<code>EmptyBox()</code>创建了一个<code>pending</code>类型的<code>Box</code>，<code>pipe</code>方法内部会调用<code>pending</code>类型<code>Box</code>的<code>seal</code>方法将<code>Promise.value(1)</code>内部的值封装进<code>EmptyBox()</code>中，并且改变<code>Box</code>的类型为<code>resolved</code>，然后返回了这个新的盒子。</p><p>短短一句<code>firstly</code>包含了一个盒子的替换和状态改变。</p><h2 id="map操作"><a href="#map操作" class="headerlink" title="map操作"></a>map操作</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">map</span>&lt;U&gt;<span class="params">(on: DispatchQueue? = conf.Q.<span class="built_in">map</span>, flags: DispatchWorkItemFlags? = <span class="literal">nil</span>, <span class="number">_</span> transform: @escaping<span class="params">(T)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">U</span>) -&gt; <span class="type">Promise</span>&lt;<span class="type">U</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> rp = <span class="type">Promise</span>&lt;<span class="type">U</span>&gt;(.pending)</span><br><span class="line">    pipe &#123;</span><br><span class="line">        <span class="keyword">switch</span> $<span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .fulfilled(<span class="keyword">let</span> value):</span><br><span class="line">            on.async(flags: flags) &#123;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    rp.box.seal(.fulfilled(<span class="keyword">try</span> transform(value)))</span><br><span class="line">                &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">                    rp.box.seal(.rejected(error))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> .rejected(<span class="keyword">let</span> error):</span><br><span class="line">            rp.box.seal(.rejected(error))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先上一步的<code>Promise.value(1)</code>就会创建一个<code>Promise(box: SealedBox(value: .fulfilled(value)))</code>，内部<code>Box</code>中的值就是<code>fulfilled</code>类型的，所以这里的<code>pipe</code>会执行<code>fulfilled</code>分支，在制定的线程上异步执行内部新盒子的<code>seal</code>方法替换值并改变状态，这里内部还会捕捉<code>transform</code>执行的异常自动的进行<code>rejected</code>调用。如果没有错误，就又会返回一个新的<code>Promise</code>包含了<code>map</code>之后的新值。</p><h2 id="then操作"><a href="#then操作" class="headerlink" title="then操作"></a>then操作</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">then</span>&lt;U: Thenable&gt;<span class="params">(on: DispatchQueue? = conf.Q.<span class="built_in">map</span>, flags: DispatchWorkItemFlags? = <span class="literal">nil</span>, <span class="number">_</span> body: @escaping<span class="params">(T)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">U</span>) -&gt; <span class="type">Promise</span>&lt;<span class="type">U</span>.<span class="type">T</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> rp = <span class="type">Promise</span>&lt;<span class="type">U</span>.<span class="type">T</span>&gt;(.pending)</span><br><span class="line">    pipe &#123;</span><br><span class="line">        <span class="keyword">switch</span> $<span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .fulfilled(<span class="keyword">let</span> value):</span><br><span class="line">            on.async(flags: flags) &#123;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> rv = <span class="keyword">try</span> body(value)</span><br><span class="line">                    <span class="keyword">guard</span> rv !== rp <span class="keyword">else</span> &#123; <span class="keyword">throw</span> <span class="type">PMKError</span>.returnedSelf &#125;</span><br><span class="line">                    rv.pipe(to: rp.box.seal)</span><br><span class="line">                &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">                    rp.box.seal(.rejected(error))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> .rejected(<span class="keyword">let</span> error):</span><br><span class="line">            rp.box.seal(.rejected(error))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看这个样子有点像<code>map</code>操作，但是仔细看返回值不一样，<code>map</code>操作返回<code>Promise&lt;U&gt;</code>，<code>then</code>操作返回<code>Promise&lt;U.T&gt;</code>，这是因为我们在<code>map</code>和<code>then</code>中做的事情不一样,比如我们的<code>Promise&lt;Int&gt;</code>做<code>map</code>操作，<code>transform</code>闭包返回值是<code>Int</code>,而<code>then</code>中<code>body</code>闭包返回值是<code>Promise&lt;T&gt;</code>，所以最后还要将内部的类型取出来作为一个新得<code>Promise</code>返回，所以就要返回<code>Promise&lt;U.T&gt;</code>。</p><p>剩下的操作差不多就是在指定的线程队列上异步指定<code>body</code>取得新的<code>Promise</code> ，然后判断我们传递进去的<code>Promise</code>和内部新创建的<code>Promise</code>是不是相同，如果相同就抛出错误，如果不同就我们传入的<code>Promise</code>值传递给内部<code>Promise</code>并改变状态，最后返回新<code>Promise</code>。</p><h2 id="done操作"><a href="#done操作" class="headerlink" title="done操作"></a>done操作</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">done</span><span class="params">(on: DispatchQueue? = conf.Q.<span class="keyword">return</span>, flags: DispatchWorkItemFlags? = <span class="literal">nil</span>, <span class="number">_</span> body: @escaping<span class="params">(T)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">Void</span>) -&gt; <span class="type">Promise</span>&lt;<span class="type">Void</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> rp = <span class="type">Promise</span>&lt;<span class="type">Void</span>&gt;(.pending)</span><br><span class="line">    pipe &#123;</span><br><span class="line">        <span class="keyword">switch</span> $<span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .fulfilled(<span class="keyword">let</span> value):</span><br><span class="line">            on.async(flags: flags) &#123;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> body(value)</span><br><span class="line">                    rp.box.seal(.fulfilled(()))</span><br><span class="line">                &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">                    rp.box.seal(.rejected(error))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> .rejected(<span class="keyword">let</span> error):</span><br><span class="line">            rp.box.seal(.rejected(error))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这个指定逻辑就知道了，已经到最后的执行步骤了，不会在有下一步的执行，所以传递进去的闭包没有返回值，内部也直接返回了一个<code>Promise&lt;Void&gt;</code>。</p><h2 id="catch操作"><a href="#catch操作" class="headerlink" title="catch操作"></a>catch操作</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@discardableResult</span><br><span class="line"><span class="function"><span class="keyword">func</span> `<span class="title">catch</span>`<span class="params">(on: DispatchQueue? = conf.Q.<span class="keyword">return</span>, flags: DispatchWorkItemFlags? = <span class="literal">nil</span>, policy: CatchPolicy = conf.catchPolicy, <span class="number">_</span> body: @escaping<span class="params">(Error)</span></span></span> -&gt; <span class="type">Void</span>) -&gt; <span class="type">PMKFinalizer</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> finalizer = <span class="type">PMKFinalizer</span>()</span><br><span class="line">    pipe &#123;</span><br><span class="line">        <span class="keyword">switch</span> $<span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .rejected(<span class="keyword">let</span> error):</span><br><span class="line">            <span class="keyword">guard</span> policy == .allErrors || !error.isCancelled <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">fallthrough</span></span><br><span class="line">            &#125;</span><br><span class="line">            on.async(flags: flags) &#123;</span><br><span class="line">                body(error)</span><br><span class="line">                finalizer.pending.resolve(())</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> .fulfilled:</span><br><span class="line">            finalizer.pending.resolve(())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> finalizer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PMKFinalizer类型"><a href="#PMKFinalizer类型" class="headerlink" title="PMKFinalizer类型"></a>PMKFinalizer类型</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PMKFinalizer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> pending = <span class="type">Guarantee</span>&lt;<span class="type">Void</span>&gt;.pending()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// `finally` is the same as `ensure`, but it is not chainable</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">finally</span><span class="params">(on: DispatchQueue? = conf.Q.<span class="keyword">return</span>, flags: DispatchWorkItemFlags? = <span class="literal">nil</span>, <span class="number">_</span> body: @escaping <span class="params">()</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        pending.guarantee.done(on: on, flags: flags) &#123;</span><br><span class="line">            body()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个第一句有点意思 它的方法像下面这样</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法内部又是一个方法，内部方法返回的是一个元组 所以padding的类型就是一个元组</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">pending</span>() -&gt; (<span class="title">guarantee</span>: <span class="title">Guarantee</span>&lt;<span class="title">T</span>&gt;, <span class="title">resolve</span>: (<span class="title">T</span>) -&gt; <span class="title">Void</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; ($<span class="number">0</span>, $<span class="number">0</span>.box.seal) &#125;(<span class="type">Guarantee</span>&lt;<span class="type">T</span>&gt;(.pending))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后padding的类型是：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pending = (<span class="type">Guarantee</span>&lt;<span class="type">T</span>&gt;(.pending), <span class="type">Guarantee</span>&lt;<span class="type">T</span>&gt;(.pending).box.seal)</span><br></pre></td></tr></table></figure><p>所以再回过头看<code>catch</code>的操作就是，检查前面的步骤中有<code>rejected</code>，就执行<code>rejected</code>操作，进行一个错误的筛选，然后执行我们的闭包操作在执行<code>finalizer.pending.resolve(())</code>，其实这个<code>finalizer.pending.resolve(())</code>具体的执行仅仅改变了<code>Guarantee</code>内部<code>box</code>的状态剩下的啥也没干，筛选错误时还允许穿透到<code>fulfilled</code>分支，其实也是什么也没做，仅仅改变状态，最后返回<code>finalizer</code>对象。</p><h2 id="finally操作"><a href="#finally操作" class="headerlink" title="finally操作"></a>finally操作</h2><p>因为<code>catch</code>操作返回的<code>finalizer</code>对象有一个<code>finally</code>方法，所以最后可以调用，内部调用了元组中<code>Guarantee&lt;T&gt;(.pending)</code>的<code>done</code>方法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@discardableResult</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">done</span><span class="params">(on: DispatchQueue? = conf.Q.<span class="keyword">return</span>, flags: DispatchWorkItemFlags? = <span class="literal">nil</span>, <span class="number">_</span> body: @escaping<span class="params">(T)</span></span></span> -&gt; <span class="type">Void</span>) -&gt; <span class="type">Guarantee</span>&lt;<span class="type">Void</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> rg = <span class="type">Guarantee</span>&lt;<span class="type">Void</span>&gt;(.pending)</span><br><span class="line">    pipe &#123; (value: <span class="type">T</span>) <span class="keyword">in</span></span><br><span class="line">        on.async(flags: flags) &#123;</span><br><span class="line">            body(value)</span><br><span class="line">            rg.box.seal(())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Guarantee</code>中的<code>done</code>方法没有<code>rejected</code>分支判断，这个类的语义就是保证都成功，其他的和<code>Promise</code>的<code>done</code>操作类似。</p><h2 id="最后的总结"><a href="#最后的总结" class="headerlink" title="最后的总结"></a>最后的总结</h2><p>首先我们构造<code>Promise</code>时</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">firstly &#123;</span><br><span class="line">    <span class="type">URLSession</span>.shared.dataTask(.promise, with: <span class="keyword">try</span> makeUrlRequest()).validate()</span><br><span class="line">    <span class="comment">// ^^ we provide `.validate()` so that eg. 404s get converted to errors</span></span><br><span class="line">&#125;.<span class="built_in">map</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> <span class="type">JSONDecoder</span>().decode(<span class="type">Foo</span>.<span class="keyword">self</span>, with: $<span class="number">0</span>.data)</span><br><span class="line">&#125;.done &#123; foo <span class="keyword">in</span></span><br><span class="line">    <span class="comment">//…</span></span><br><span class="line">&#125;.<span class="keyword">catch</span> &#123; error <span class="keyword">in</span></span><br><span class="line">    <span class="comment">//…</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>firstly</code>内部帮我们启动了一个异步队列跑我们的耗时任务，然后在接下来的<code>map</code>或<code>then</code>中又切换回主线程调用我们的操作，这样就实现了异步的链式调用。    </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;源码版本：6.8.4&lt;/p&gt;
&lt;p&gt;首先从官方实例开始&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; PromiseKit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;promise3&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Promise&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; after(.seconds(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)).&lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;&amp;#123; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;firstly &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;Promise&lt;/span&gt;.value(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;.&lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt; &amp;#123; &lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;.then &amp;#123; &lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    promise3()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;.done &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;// =&amp;gt; 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;.&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; &amp;#123; error &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// only happens for errors&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;.finally &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;PlaygroundPage&lt;/span&gt;.current.finishExecution()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//使Playground等待异步操作执行完在退出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;PlaygroundPage&lt;/span&gt;.current.needsIndefiniteExecution = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="源码分析" scheme="http://softdevblog.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>SnapKit源码分析</title>
    <link href="http://softdevblog.com/2019/05/06/SnapKit%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://softdevblog.com/2019/05/06/SnapKit源码分析/</id>
    <published>2019-05-06T14:24:39.000Z</published>
    <updated>2019-05-06T14:31:54.278Z</updated>
    
    <content type="html"><![CDATA[<p>官方Github说明上的实例代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SnapKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> box = <span class="type">UIView</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.view.addSubview(box)</span><br><span class="line">        box.snp.makeConstraints &#123; (make) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">           make.width.height.equalTo(<span class="number">50</span>)</span><br><span class="line">           make.center.equalTo(<span class="keyword">self</span>.view)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="snp是什么"><a href="#snp是什么" class="headerlink" title="snp是什么"></a>snp是什么</h2><p>它定义在<code>ConstraintView+Extensions.swift</code>中，是一个对<code>ConstraintView</code>的扩展，<code>ConstraintView</code>根据对应的平台不同代表<code>UIView</code>或者<code>NSView</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">if</span> os(iOS) || os(tvOS)</span><br><span class="line">    <span class="keyword">import</span> UIKit</span><br><span class="line">#<span class="keyword">else</span></span><br><span class="line">    <span class="keyword">import</span> AppKit</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span> os(iOS) || os(tvOS)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">ConstraintView</span> = <span class="type">UIView</span></span><br><span class="line">#<span class="keyword">else</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">ConstraintView</span> = <span class="type">NSView</span></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>统一各平台<code>View</code>的差异性，定义了一个统一的别名。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">extension</span> <span class="title">ConstraintView</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//最初版本的方法被弃用了</span></span><br><span class="line">    <span class="meta">@available</span>(*, deprecated, message:<span class="string">"Use newer snp.* syntax."</span>)</span><br><span class="line">    <span class="keyword">var</span> snp_left: <span class="type">ConstraintItem</span> &#123; <span class="keyword">return</span> <span class="keyword">self</span>.snp.<span class="keyword">left</span> &#125;</span><br><span class="line">    ......</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//扩展了一个snp计算型属性</span></span><br><span class="line">    <span class="keyword">var</span> snp: <span class="type">ConstraintViewDSL</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">ConstraintViewDSL</span>(view: <span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该扩展为<code>UIView</code>扩展了一个名叫<code>snp</code>的计算型属性，返回一个持有了<code>view</code>实例的<code>ConstraintViewDSL</code>对象，结合官方给的例子，就是持有了<code>box</code>的<code>ConstraintViewDSL</code>对象。</p><h2 id="makeConstraints如何执行的"><a href="#makeConstraints如何执行的" class="headerlink" title="makeConstraints如何执行的"></a>makeConstraints如何执行的</h2><p><code>ConstraintViewDSL</code>是一个实现了<code>ConstraintAttributesDSL</code>的协议的结构体，<code>ConstraintAttributesDSL</code>协议又继承自<code>ConstraintBasicAttributesDSL</code>协议，最后继承到<code>ConstraintDSL</code>协议，完整的继承关系如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">ConstraintDSL</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> target: <span class="type">AnyObject</span>? &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setLabel</span><span class="params">(<span class="number">_</span> value: String?)</span></span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">label</span><span class="params">()</span></span> -&gt; <span class="type">String</span>?</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">ConstraintBasicAttributesDSL</span> : <span class="title">ConstraintDSL</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">ConstraintAttributesDSL</span> : <span class="title">ConstraintBasicAttributesDSL</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这协议都通过<code>extension</code>定义了一些默认的方法实现首先<code>ConstraintDSL</code>实现如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ConstraintDSL</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">setLabel</span><span class="params">(<span class="number">_</span> value: String?)</span></span> &#123;</span><br><span class="line">        objc_setAssociatedObject(<span class="keyword">self</span>.target <span class="keyword">as</span> <span class="type">Any</span>, &amp;labelKey, value, .<span class="type">OBJC_ASSOCIATION_COPY_NONATOMIC</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">label</span><span class="params">()</span></span> -&gt; <span class="type">String</span>? &#123;</span><br><span class="line">        <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>.target <span class="keyword">as</span> <span class="type">Any</span>, &amp;labelKey) <span class="keyword">as</span>? <span class="type">String</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个方法会为我们调用<code>snp</code>的<code>view</code>添加一个标签，用于帮助我们调试，用官方例子来说，就是可以像下面这样添加一个标签：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">box.snp.setLabel(<span class="string">"box view"</span>) <span class="comment">//添加用于调试的标签信息</span></span><br></pre></td></tr></table></figure><p><code>ConstraintBasicAttributesDSL</code>和<code>ConstraintAttributesDSL</code>协议都是定义了我们可以设置的属性比如<code>left</code>、<code>width</code>、<code>centerX</code>等等，不同的在于<code>ConstraintBasicAttributesDSL</code>协议中提供的属性是低版本就有的一些通用属性，而<code>ConstraintAttributesDSL</code>提供的是<code>iOS8</code>新增的属性，比如<code>lastBaseline</code>、<code>leftMargin</code>、<code>topMargin</code>等。部分代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ConstraintBasicAttributesDSL</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// MARK: Basics</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> <span class="keyword">left</span>: <span class="type">ConstraintItem</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">ConstraintItem</span>(target: <span class="keyword">self</span>.target, attributes: <span class="type">ConstraintAttributes</span>.<span class="keyword">left</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> top: <span class="type">ConstraintItem</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">ConstraintItem</span>(target: <span class="keyword">self</span>.target, attributes: <span class="type">ConstraintAttributes</span>.top)</span><br><span class="line">    &#125; </span><br><span class="line">  </span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ConstraintAttributesDSL</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// MARK: Baselines</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@available</span>(*, deprecated, message:<span class="string">"Use .lastBaseline instead"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> baseline: <span class="type">ConstraintItem</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">ConstraintItem</span>(target: <span class="keyword">self</span>.target, attributes: <span class="type">ConstraintAttributes</span>.lastBaseline)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@available</span>(iOS <span class="number">8.0</span>, <span class="type">OSX</span> <span class="number">10.11</span>, *)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> lastBaseline: <span class="type">ConstraintItem</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">ConstraintItem</span>(target: <span class="keyword">self</span>.target, attributes: <span class="type">ConstraintAttributes</span>.lastBaseline)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@available</span>(iOS <span class="number">8.0</span>, <span class="type">OSX</span> <span class="number">10.11</span>, *)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> firstBaseline: <span class="type">ConstraintItem</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">ConstraintItem</span>(target: <span class="keyword">self</span>.target, attributes: <span class="type">ConstraintAttributes</span>.firstBaseline)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// MARK: Margins</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@available</span>(iOS <span class="number">8.0</span>, *)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> leftMargin: <span class="type">ConstraintItem</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">ConstraintItem</span>(target: <span class="keyword">self</span>.target, attributes: <span class="type">ConstraintAttributes</span>.leftMargin)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@available</span>(iOS <span class="number">8.0</span>, *)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> topMargin: <span class="type">ConstraintItem</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">ConstraintItem</span>(target: <span class="keyword">self</span>.target, attributes: <span class="type">ConstraintAttributes</span>.topMargin)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来看定义在<code>ConstraintViewDSL</code>结构体中的<code>makeConstraints</code>方法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">makeConstraints</span><span class="params">(<span class="number">_</span> closure: <span class="params">(<span class="number">_</span> make: ConstraintMaker)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">  <span class="comment">//self.view 对应官方实例中的box, closure就是我们后面写的闭包</span></span><br><span class="line"><span class="type">ConstraintMaker</span>.makeConstraints(item: <span class="keyword">self</span>.view, closure: closure)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法接收一个闭包，然后将闭包传给了<code>ConstraintMaker</code>的静态方法中，那就看看`makeConstraints静态方法做了什么：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ConstraintMaker中的静态方法</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">makeConstraints</span><span class="params">(item: LayoutConstraintItem, closure: <span class="params">(<span class="number">_</span> make: ConstraintMaker)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> constraints = prepareConstraints(item: item, closure: closure)</span><br><span class="line">    <span class="keyword">for</span> constraint <span class="keyword">in</span> constraints &#123;</span><br><span class="line">        constraint.activateIfNeeded(updatingExisting: <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>LayoutConstraintItem</code>又是一个协议代码像下面这样：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义了一个是能被类遵守的协议</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">LayoutConstraintItem</span>: <span class="title">class</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//还为iOS9新增的Guide也遵守了这个协议</span></span><br><span class="line"><span class="meta">@available</span>(iOS <span class="number">9.0</span>, <span class="type">OSX</span> <span class="number">10.11</span>, *)</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ConstraintLayoutGuide</span> : <span class="title">LayoutConstraintItem</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里为我们的UIView遵守了这个协议</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ConstraintView</span> : <span class="title">LayoutConstraintItem</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">LayoutConstraintItem</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这个方法为代码布局的UIView对象关闭了Autoresizing自动创建AutoLayout约束防止约束冲突</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">func</span> <span class="title">prepare</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> view = <span class="keyword">self</span> <span class="keyword">as</span>? <span class="type">ConstraintView</span> &#123;</span><br><span class="line">            view.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看<code>makeConstraints</code>第一行代码所调用的代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">prepareConstraints</span><span class="params">(item: LayoutConstraintItem, closure: <span class="params">(<span class="number">_</span> make: ConstraintMaker)</span></span></span> -&gt; <span class="type">Void</span>) -&gt; [<span class="type">Constraint</span>] &#123;</span><br><span class="line">  <span class="comment">// 构造了持有UIView实例的ConstraintMaker用于收集所有约束信息</span></span><br><span class="line">    <span class="keyword">let</span> maker = <span class="type">ConstraintMaker</span>(item: item)</span><br><span class="line">  <span class="comment">// 执行了我们闭包中写的约束代码</span></span><br><span class="line">    closure(maker)</span><br><span class="line">    <span class="keyword">var</span> constraints: [<span class="type">Constraint</span>] = []</span><br><span class="line">    <span class="keyword">for</span> description <span class="keyword">in</span> maker.descriptions &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> constraint = description.constraint <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        constraints.append(constraint)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> constraints</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法就是实际调用闭包的地方，首先将我们的<code>View</code>构造了<code>ConstraintMaker</code>对象：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">init</span>(item: <span class="type">LayoutConstraintItem</span>) &#123;</span><br><span class="line">  <span class="comment">// 首先持有了UIView对象</span></span><br><span class="line">    <span class="keyword">self</span>.item = item</span><br><span class="line">    <span class="comment">// 接着调用了LayoutConstraintItem扩展的prepare()方法 避免了AutoLayout约束冲突</span></span><br><span class="line">    <span class="keyword">self</span>.item.prepare()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着就调用了我们传进来的闭包<code>closure(maker)</code>,将刚才的<code>ConstraintMaker</code>传进去了，所以我们才能使用闭包中的<code>maker</code>设置各种约束。</p><h3 id="链式调用的实现"><a href="#链式调用的实现" class="headerlink" title="链式调用的实现"></a>链式调用的实现</h3><p>看看<code>ConstraintMaker</code>代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstraintMaker</span> </span>&#123;</span><br><span class="line">    <span class="comment">///删除了一些属性，只保留两个有代表性的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> width: <span class="type">ConstraintMakerExtendable</span> &#123;</span><br><span class="line">      <span class="comment">//调用一个方法包装系统属性</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.makeExtendableWithAttributes(.width)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> height: <span class="type">ConstraintMakerExtendable</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.makeExtendableWithAttributes(.height)</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> item: <span class="type">LayoutConstraintItem</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> descriptions = [<span class="type">ConstraintDescription</span>]()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">init</span>(item: <span class="type">LayoutConstraintItem</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.item = item</span><br><span class="line">        <span class="keyword">self</span>.item.prepare()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//包装系统的约束属性</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">func</span> <span class="title">makeExtendableWithAttributes</span><span class="params">(<span class="number">_</span> attributes: ConstraintAttributes)</span></span> -&gt; <span class="type">ConstraintMakerExtendable</span> &#123;</span><br><span class="line">        <span class="comment">// ConstraintDescription这个类记录一条约束的完整信息，目前可能还不完整但是稍后会通过ConstraintMakerExtendable类的操作补全信息</span></span><br><span class="line">        <span class="keyword">let</span> description = <span class="type">ConstraintDescription</span>(item: <span class="keyword">self</span>.item, attributes: attributes)</span><br><span class="line">      <span class="comment">// 将约束信息保存到一个数组中，因为一个对象有多条约束信息</span></span><br><span class="line">        <span class="keyword">self</span>.descriptions.append(description)</span><br><span class="line">      <span class="comment">// 返回给外部使用用于继续设置约束信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="type">ConstraintMakerExtendable</span>(description)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">prepareConstraints</span><span class="params">(item: LayoutConstraintItem, closure: <span class="params">(<span class="number">_</span> make: ConstraintMaker)</span></span></span> -&gt; <span class="type">Void</span>) -&gt; [<span class="type">Constraint</span>] &#123;</span><br><span class="line">        <span class="keyword">let</span> maker = <span class="type">ConstraintMaker</span>(item: item)</span><br><span class="line">        closure(maker)</span><br><span class="line">        <span class="keyword">var</span> constraints: [<span class="type">Constraint</span>] = []</span><br><span class="line">        <span class="keyword">for</span> description <span class="keyword">in</span> maker.descriptions &#123;</span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> constraint = description.constraint <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            constraints.append(constraint)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> constraints</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">makeConstraints</span><span class="params">(item: LayoutConstraintItem, closure: <span class="params">(<span class="number">_</span> make: ConstraintMaker)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> constraints = prepareConstraints(item: item, closure: closure)</span><br><span class="line">        <span class="keyword">for</span> constraint <span class="keyword">in</span> constraints &#123;</span><br><span class="line">            constraint.activateIfNeeded(updatingExisting: <span class="literal">false</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于每个属性都返回<code>ConstraintMakerExtendable</code>对象所以他们可以链式的调用设置属性的值，</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个对象用于设置约束的关系 具体实现篇幅关系 省略了</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstraintMakerRelatable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">let</span> description: <span class="type">ConstraintDescription</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">init</span>(<span class="number">_</span> description: <span class="type">ConstraintDescription</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.description = description</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">func</span> <span class="title">relatedTo</span><span class="params">(<span class="number">_</span> other: ConstraintRelatableTarget, relation: ConstraintRelation, file: String, line: UInt)</span></span> -&gt; <span class="type">ConstraintMakerEditable</span> &#123;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @discardableResult</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">equalTo</span><span class="params">(<span class="number">_</span> other: ConstraintRelatableTarget, <span class="number">_</span> file: String = #file, <span class="number">_</span> line: UInt = #line)</span></span> -&gt; <span class="type">ConstraintMakerEditable</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.relatedTo(other, relation: .<span class="built_in">equal</span>, file: file, line: line)</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个对象主要是用于合并属性 合并属性用的是OptionSet的重在操作符</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstraintMakerExtendable</span>: <span class="title">ConstraintMakerRelatable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> <span class="keyword">left</span>: <span class="type">ConstraintMakerExtendable</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.description.attributes += .<span class="keyword">left</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> top: <span class="type">ConstraintMakerExtendable</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.description.attributes += .top</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于每个操作都返回<code>ConstraintMakerExtendable</code>对象，所以链式调用就实现了</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">let</span> description: <span class="type">ConstraintDescription</span></span><br></pre></td></tr></table></figure><p>并且最后都操作在了<code>description</code>这个内部属性上，所以每一步的操作组合成了一条完整的约束所需要的信息。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> description <span class="keyword">in</span> maker.descriptions &#123;</span><br><span class="line">    <span class="comment">// 这里取得每一个约束的描述对象构造了Constraint对象，这类里面实际构造了系统的AutoLayout约束对象和约束相关的操作，还记录了一些调试信息，因为Constraint的构造过程是可为空的所以这里判断非空才加到数组中</span></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> constraint = description.constraint <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    constraints.append(constraint)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启用约束"><a href="#启用约束" class="headerlink" title="启用约束"></a>启用约束</h3><p>所以经过<code>closure(maker)</code>这么一句短短的调用，所有的约束信息就都被收集在<code>[ConstraintDescription]</code>数组中，所以下面的操作就是取出一条条的约束并且设置启用。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> constraint <span class="keyword">in</span> constraints &#123;</span><br><span class="line">    constraint.activateIfNeeded(updatingExisting: <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面就是<code>Constraint</code>关于启用约束的代码，简单看一下实现<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">func</span> <span class="title">activateIfNeeded</span><span class="params">(updatingExisting: Bool = <span class="literal">false</span>)</span></span> &#123;</span><br><span class="line">  <span class="comment">//首先判断这个</span></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> item = <span class="keyword">self</span>.from.layoutConstraintItem <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"WARNING: SnapKit failed to get from item from constraint. Activate will be a no-op."</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//我们在闭包中像make.width.height.equalTo(50)这种组合设置的约束在Constraint内部构造系统约束时都会分开构造，所以这里用数组存储</span></span><br><span class="line">    <span class="keyword">let</span> layoutConstraints = <span class="keyword">self</span>.layoutConstraints</span><br><span class="line"></span><br><span class="line">    <span class="comment">//外部传递的参数 是否更新以存在的约束 对于makeConstraints方法 传递的是false</span></span><br><span class="line">    <span class="keyword">if</span> updatingExisting &#123;</span><br><span class="line">        <span class="comment">//这里先记录View上已经存在的约束信息</span></span><br><span class="line">        <span class="keyword">var</span> existingLayoutConstraints: [<span class="type">LayoutConstraint</span>] = []</span><br><span class="line">        <span class="keyword">for</span> constraint <span class="keyword">in</span> item.constraints &#123;</span><br><span class="line">            existingLayoutConstraints += constraint.layoutConstraints</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//循环将要设置的约束信息</span></span><br><span class="line">        <span class="keyword">for</span> layoutConstraint <span class="keyword">in</span> layoutConstraints &#123;</span><br><span class="line">            <span class="comment">//取出第一个重复的约束</span></span><br><span class="line">            <span class="keyword">let</span> existingLayoutConstraint = existingLayoutConstraints.first &#123; $<span class="number">0</span> == layoutConstraint &#125;</span><br><span class="line">            <span class="comment">//如果不为空</span></span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> updateLayoutConstraint = existingLayoutConstraint <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">fatalError</span>(<span class="string">"Updated constraint could not find existing matching constraint to update: <span class="subst">\(layoutConstraint)</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//就更新这个约束 先判断是否是width,height等没有相对约束的自身约束，取出要更新的属性</span></span><br><span class="line">            <span class="keyword">let</span> updateLayoutAttribute = (updateLayoutConstraint.secondAttribute == .notAnAttribute) ? updateLayoutConstraint.firstAttribute : updateLayoutConstraint.secondAttribute</span><br><span class="line">            <span class="comment">//constraintConstantTargetValueFor将得到的属性值转换成对应的格式更新到约束中</span></span><br><span class="line">            updateLayoutConstraint.constant = <span class="keyword">self</span>.constant.constraintConstantTargetValueFor(layoutAttribute: updateLayoutAttribute)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果不需要更新直接启用新设置的约束</span></span><br><span class="line">        <span class="type">NSLayoutConstraint</span>.activate(layoutConstraints)</span><br><span class="line">      <span class="comment">//加到View持有的Set中保存起来</span></span><br><span class="line">        item.add(constraints: [<span class="keyword">self</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>makeConstraints</code>方法的大致流程就分析完了</p><h2 id="不同的构造约束的方法区别"><a href="#不同的构造约束的方法区别" class="headerlink" title="不同的构造约束的方法区别"></a>不同的构造约束的方法区别</h2><p><code>SnapKit</code>提供了三种方法构造约束，从源码的角度看看它们有什么区别吧</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最常用的 上面以及分析过</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">makeConstraints</span><span class="params">(item: LayoutConstraintItem, closure: <span class="params">(<span class="number">_</span> make: ConstraintMaker)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> constraints = prepareConstraints(item: item, closure: closure)</span><br><span class="line">    <span class="keyword">for</span> constraint <span class="keyword">in</span> constraints &#123;</span><br><span class="line">        constraint.activateIfNeeded(updatingExisting: <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简单粗暴 删除之前的约束 设置新的约束</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">remakeConstraints</span><span class="params">(item: LayoutConstraintItem, closure: <span class="params">(<span class="number">_</span> make: ConstraintMaker)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.removeConstraints(item: item)</span><br><span class="line">    <span class="keyword">self</span>.makeConstraints(item: item, closure: closure)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只更新以存在的约束 如果有之前不存在的约束会抛出错误</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">updateConstraints</span><span class="params">(item: LayoutConstraintItem, closure: <span class="params">(<span class="number">_</span> make: ConstraintMaker)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">    <span class="keyword">guard</span> item.constraints.<span class="built_in">count</span> &gt; <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.makeConstraints(item: item, closure: closure)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> constraints = prepareConstraints(item: item, closure: closure)</span><br><span class="line">    <span class="keyword">for</span> constraint <span class="keyword">in</span> constraints &#123;</span><br><span class="line">        constraint.activateIfNeeded(updatingExisting: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找公共父视图"><a href="#查找公共父视图" class="headerlink" title="查找公共父视图"></a>查找公共父视图</h2><p>这是一段时间以来有名的面试题，在OC平台的<code>Masonry</code>中有一个方法<code>mas_closestCommonSuperview</code>实现了这个算法，原因在于<code>iOS8</code>之前的版本是没有<code>NSLayoutConstraint.activate()</code>这么简便的设置约束的方法的，有些约束需要设置在自身上，有些需要设置在公共父视图上，所以<code>Masonry</code>实现了这个算法，由于<code>Swift</code> <code>iOS8</code>以上才可以使用所以就没有必要实现那个算法了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;官方Github说明上的实例代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; SnapKit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyViewController&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;UIViewController&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; box = &lt;span class=&quot;type&quot;&gt;UIView&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.addSubview(box)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        box.snp.makeConstraints &amp;#123; (make) -&amp;gt; &lt;span class=&quot;type&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           make.width.height.equalTo(&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           make.center.equalTo(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="源码分析" scheme="http://softdevblog.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>iOS Audio Unit 实践</title>
    <link href="http://softdevblog.com/2019/05/05/iOS-Audio-Unit-%E5%AE%9E%E8%B7%B5/"/>
    <id>http://softdevblog.com/2019/05/05/iOS-Audio-Unit-实践/</id>
    <published>2019-05-04T21:21:23.000Z</published>
    <updated>2019-05-06T14:25:05.158Z</updated>
    
    <content type="html"><![CDATA[<p>在iOS平台上，所有的音频框架都是基于AudioUnit实现的，使用AudioUnit会给你带来最大的自由度。</p><p><img src="https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/Art/Audio_frameworks_2x.png" alt="iOS平台音频框架层次图"></p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>Simultaneous audio I/O (input and output) with low latency, such as for a VoIP (Voice over Internet Protocol) application</li><li>低延迟的音频I/O场景，比如VoIP（俗称网络电话）</li><li>Responsive playback of synthesized sounds, such as for musical games or synthesized musical instruments</li><li>多路声音合成回放，比如游戏、音乐合成器</li><li>Use of a specific audio unit feature such as acoustic echo cancelation, mixing, or tonal equalization</li><li>使用AudioUnit特有功能，比如回声消除、混合、均衡器等</li><li>A processing-chain architecture that lets you assemble audio processing modules into flexible networks. This is the only audio API in iOS offering this capability.</li><li>想使用音频处理模块组成一个处理链网络（一种图状的数据结构），在iOS平台中AudioUnit是唯一提供这种功能的API</li></ul><a id="more"></a><h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><h4 id="AudioUnit类型"><a href="#AudioUnit类型" class="headerlink" title="AudioUnit类型"></a>AudioUnit类型</h4><ol><li><h5 id="Effect"><a href="#Effect" class="headerlink" title="Effect"></a>Effect</h5><p><code>kAudioUnitType_Effect</code> 用于声音特效处理</p><p>常用子类型如下：</p><ul><li>均衡效果器：<code>kAudioUnitSubType_NBandEQ</code></li><li>压缩效果器：<code>kAudioUnitSubType_DynamicsProcessor</code></li><li>混响效果器：<code>kAudioUnitSubType_Reverb2</code></li><li>高通：<code>kAudioUnitSubType_HighPassFilter</code></li><li>低通：<code>kAudioUnitSubType_LowPassFilter</code></li><li>带通：<code>kAudioUnitSubType_BandPassFilter</code></li><li>延迟：<code>kAudioUnitSubType_Delay</code></li><li>压限：<code>kAudioUnitSubType_PeakLimiter</code></li></ul></li><li><h5 id="Mixing"><a href="#Mixing" class="headerlink" title="Mixing"></a>Mixing</h5><p><code>kAudioUnitType_Mixer</code> 用于合成多路音频流</p><p>常用子类型：</p><ul><li>MultiChannelMixer：<code>kAudioUnitSubType_MultiChannelMixer</code> 混合多路声音的效果器，接收多路声音的输入，可以单独调整每一路声音的增益与开关，将多路声音混合成一路输出。</li></ul></li><li><h5 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h5><p><code>kAudioUnitType_Output</code> 提供<code>I/O</code>功能</p><p>常用子类型：</p><ul><li>RemoteIO：<code>kAudioUnitSubType_RemoteIO</code> 用来采集音频与播放音频，使用麦克风和扬声器。</li><li>Generic Output：<code>kAudioUnitSubType_GenericOutput</code> 离线处理，不需要使用扬声器播放，将音频数据放入内存队列或文件中时使用此类型。</li></ul></li><li><h5 id="Format-conversion"><a href="#Format-conversion" class="headerlink" title="Format conversion"></a>Format conversion</h5><p><code>kAudioUnitType_FormatConverter</code> 用于格式转换功能，如采样格式<code>Float</code>到<code>SInt16</code> 、交错和平铺格式转换、单双声道转换。</p><p>常用子类型：</p><ul><li>AUConverter：<code>kAudioUnitSubType_AUConverter</code> 格式转换效果器</li><li>Time Pitch：<code>kAudioUnitSubType_TimePitch</code> 变速变调效果器</li></ul></li><li><h5 id="Generator-Unit"><a href="#Generator-Unit" class="headerlink" title="Generator Unit"></a>Generator Unit</h5><p><code>kAudioUnitType_Generator</code> 常用它来提供播放器功能</p><p>常用子类型：</p><ul><li>AudioFilePlayer：<code>kAudioUnitSubType_AudioFilePlayer</code> 如果输入不是麦克风是一个媒体文件使用此类型。</li></ul></li></ol><h4 id="AudioUnit概念"><a href="#AudioUnit概念" class="headerlink" title="AudioUnit概念"></a>AudioUnit概念</h4><p><img src="https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/Art/audioUnitScopes_2x.png" alt="通用的AudioUnit结构"></p><p>一个<code>AudioUnit</code>包含1～2条<code>Element</code>，<code>Element</code>是音频数据处理的上下文，也称为<code>Bus</code>。每一个<code>Element</code>分为输入和输出两部分，分别称为<code>Input scope</code>和<code>Output scope</code>。</p><p><img src="https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/Art/IO_unit_2x.png" alt="官网I/OUnit数据处理流程"></p><p>官网提供的<code>I/O</code>类型的<code>AudioUnit</code>的数据处理流程图。<code>I/O Unit</code>将从麦克风收集来的音频数据通过<code>Element 1</code>的<code>Input scope</code>输入经过<code>Element 1</code>的<code>Output scope</code>输出到我们的<code>App</code>中。经过我们的处理逻辑后在通过<code>Element 0</code>的<code>Input scope</code>输入，最后通过<code>Element 0</code>的<code>Output scope</code>输出到扬声器中。</p><p><img src="https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/Art/IOWithoutRenderCallback_2x.png" alt="一个完整音频处理流程"></p><p>一个将多个<code>AudioUnit</code>连接起来处理音频的流程图</p><h3 id="播放音频实践"><a href="#播放音频实践" class="headerlink" title="播放音频实践"></a>播放音频实践</h3><h4 id="创建AudioUnit"><a href="#创建AudioUnit" class="headerlink" title="创建AudioUnit"></a>创建AudioUnit</h4><p>要创建<code>AudioUnit</code>首先要创建一个<code>AudioUnit</code>描述结构体<code>AudioComponentDescription</code> 构造方法如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">init</span>()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">init</span>(componentType: <span class="type">OSType</span>, componentSubType: <span class="type">OSType</span>, componentManufacturer: <span class="type">OSType</span>, componentFlags: <span class="type">UInt32</span>, componentFlagsMask: <span class="type">UInt32</span>)</span><br></pre></td></tr></table></figure><ul><li>componentType：AudioUnit的类型， 例如：<code>kAudioUnitType_Output</code></li><li>componentSubType：AudioUnit的子类型，例如：<code>kAudioUnitSubType_RemoteIO</code></li><li>componentManufacturer：厂商 直接写 <code>kAudioUnitManufacturer_Apple</code>就可以了</li><li>componentFlags：文档中写明必须为0</li><li>componentFlagsMask： 同样必须为0</li></ul><p>创建好<code>AudioComponentDescription</code>结构体就可以使用它来创建<code>AudioUnit</code>了，创建AudioUnit有两种方式：</p><ol><li><h5 id="直接创建"><a href="#直接创建" class="headerlink" title="直接创建"></a>直接创建</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用AudioComponentFindNext方法根据AudioComponentDescription中的描述取得符合条件的AudioComponent对象</span></span><br><span class="line"><span class="keyword">let</span> component = <span class="type">AudioComponentFindNext</span>(<span class="literal">nil</span>, &amp;componentDesc)</span><br><span class="line"><span class="comment">//根据这个AudioComponent对象创建出AudioUnit</span></span><br><span class="line"><span class="type">AudioComponentInstanceNew</span>(component, &amp;audioUnit)</span><br></pre></td></tr></table></figure></li><li><h5 id="使用AUGraph创建"><a href="#使用AUGraph创建" class="headerlink" title="使用AUGraph创建"></a>使用AUGraph创建</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先创建一个AUGraph</span></span><br><span class="line"><span class="keyword">var</span> playerGraph: <span class="type">AUGraph</span></span><br><span class="line"><span class="type">NewAUGraph</span>(&amp;playerGraph)</span><br><span class="line"><span class="comment">//使用AudioComponentDescription的描述在AUGraph对象中添加一个AUNode</span></span><br><span class="line"><span class="type">AUGraphAddNode</span>(playerGraph, &amp;playerDesc, &amp;playerNode)</span><br><span class="line"><span class="comment">//打开AUGraph 这个方法就会实例化其中添加的所有AUNode，然后根据AUNode取得AudioUnit</span></span><br><span class="line"><span class="type">AUGraphOpen</span>(playerGraph)</span><br><span class="line"><span class="comment">//从playerNode中取得playerUnit实例</span></span><br><span class="line"><span class="type">AUGraphNodeInfo</span>(playerGraph, playerNode, <span class="literal">nil</span>, &amp;playerUnit)</span><br></pre></td></tr></table></figure></li></ol><h4 id="设置AudioUnit的参数"><a href="#设置AudioUnit的参数" class="headerlink" title="设置AudioUnit的参数"></a>设置AudioUnit的参数</h4><p>拿到<code>AudioUnit</code>实例后就可以这是<code>AudioUnit</code>中的参数，下面是以一个<code>Remote I/O</code>类型的<code>AudioUnit</code>为例的参数设置代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> busZero: <span class="type">UInt32</span> = <span class="number">0</span> <span class="comment">// Element 0</span></span><br><span class="line"><span class="keyword">var</span> oneFlag: <span class="type">UInt32</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">//audioUnit是RemoteIO类型的AudioUnit 可以参考上面的图 连接扬声器</span></span><br><span class="line"><span class="type">AudioUnitSetProperty</span>(audioUnit, kAudioOutputUnitProperty_EnableIO, kAudioUnitScope_Output, busZero, &amp;oneFlag, <span class="type">UInt32</span>(<span class="type">MemoryLayout</span>&lt;<span class="type">UInt32</span>&gt;.size))</span><br><span class="line"><span class="comment">//连接麦克风</span></span><br><span class="line"><span class="keyword">let</span> busOne: <span class="type">Uint32</span> = <span class="number">1</span> <span class="comment">// Element 1</span></span><br><span class="line"><span class="type">AudioUnitSetProperty</span>(audioUnit, kAudioOutputUnitProperty_EnableIO, kAudioUnitScope_Input, busOne, &amp;oneFlag, <span class="type">UInt32</span>(<span class="type">MemoryLayout</span>&lt;<span class="type">UInt32</span>&gt;.size))</span><br></pre></td></tr></table></figure><h4 id="创建AudioStreamBasicDescription"><a href="#创建AudioStreamBasicDescription" class="headerlink" title="创建AudioStreamBasicDescription"></a>创建AudioStreamBasicDescription</h4><p>这是一个音频数据的描述结构体，可以将这个描述设置到<code>AudioUnit</code>的输入或输出上，因为<code>AudioUnit</code>可以是多个连接在一起的，一个<code>AudioUnit</code>的输入是另一个<code>AudioUnit</code>的输出，所以分为输入和输出两部分。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bytesPerSample: <span class="type">UInt32</span> = <span class="type">UInt32</span>(<span class="type">MemoryLayout</span>&lt;<span class="type">Float32</span>&gt;.size)</span><br><span class="line"><span class="keyword">var</span> clientDesc = <span class="type">AudioStreamBasicDescription</span>(mSampleRate: <span class="number">44100</span>,</span><br><span class="line">                                    mFormatID: kAudioFormatLinearPCM,</span><br><span class="line">                                    mFormatFlags: kAudioFormatFlagsNativeFloatPacked | kAudioFormatFlagIsNonInterleaved,</span><br><span class="line">                                    mBytesPerPacket: bytesPerSample,</span><br><span class="line">                                    mFramesPerPacket: <span class="number">1</span>,</span><br><span class="line">                                    mBytesPerFrame: bytesPerSample,</span><br><span class="line">                                    mChannelsPerFrame: <span class="number">2</span>,</span><br><span class="line">                                    mBitsPerChannel: <span class="number">8</span> * bytesPerSample,</span><br><span class="line">                                    mReserved: <span class="number">0</span>)</span><br></pre></td></tr></table></figure><ul><li>mSampleRate：采样率</li><li>mFormatFlags：指定每个采样的数据格式，这里设置为<code>Float</code>，<code>kAudioFormatFlagIsNonInterleaved</code>表示非交错存储，音频数据实际存储在<code>AudioBufferList</code>结构中的<code>mBuffers</code>中，如果是非交错存储，左右声道音频数据就会分别存储在<code>mBuffers[0]</code>和<code>mBuffers[1]</code>中，如果是<code>Interleaved</code>交错存储，那么左右声道的音频数据就会交错存储在<code>mBuffers[0]</code>中。</li><li>mBytesPerPacket：根据<code>mFormatFlags</code>指定的<code>Float</code>类型非交错存储，就设置为<code>bytesPerSample</code>表示每个采样的字节数。但如果是<code>Interleaved</code>交错存储的，就应该设置为<code>bytesPerSample * mChannelsPerFrame</code> 因为左右声道数据是交错存在一起的。</li><li>mBytesPerFrame：同<code>mBytesPerPacket</code></li><li>mBitsPerChannel：表示每个声道的音频数据要多少位，一个字节是8位，所以用8 * 每个采样的字节数</li></ul><p>接下来就可以将<code>AudioStreamBasicDescription</code>设置给<code>AudioUnit</code>了</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//varAudioDesc是一个AudioStreamBasicDescription的实例设置给了audioUnit的Element0的Input输入端</span></span><br><span class="line"><span class="type">AudioUnitSetProperty</span>(audioUnit, kAudioUnitProperty_StreamFormat, kAudioUnitScope_Input, busZero, &amp;varAudioDesc, <span class="type">UInt32</span>(<span class="type">MemoryLayout</span>.size(ofValue: varAudioDesc)))</span><br></pre></td></tr></table></figure><h4 id="回调结构AURenderCallbackStruct"><a href="#回调结构AURenderCallbackStruct" class="headerlink" title="回调结构AURenderCallbackStruct"></a>回调结构AURenderCallbackStruct</h4><p>当<code>AudioUnit</code>启动后，就会调用<code>AURenderCallbackStruct</code>结构中指定的函数，取得数据</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> callbackStruct = <span class="type">AURenderCallbackStruct</span>(inputProc: &#123; (inRefCon, ioActionFlags, inTimeStamp, inBusNumber, inNumberFrames, ioData) -&gt; <span class="type">OSStatus</span> <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">let</span> cls:<span class="type">AudioUnitPlayMusicExample</span> = <span class="type">Unmanaged</span>&lt;<span class="type">AudioUnitPlayMusicExample</span>&gt;.fromOpaque(inRefCon).takeUnretainedValue()</span><br><span class="line">            <span class="keyword">var</span> framesPerPacket = inNumberFrames</span><br><span class="line">            <span class="keyword">return</span> cls.readFrame(frameNum: &amp;framesPerPacket, bufferList: ioData)</span><br><span class="line">        &#125;, inputProcRefCon: <span class="type">UnsafeMutableRawPointer</span>(<span class="type">Unmanaged</span>.passUnretained(<span class="keyword">self</span>).toOpaque()))</span><br><span class="line"><span class="comment">//将回调函数设置到AudioUnit中</span></span><br><span class="line"><span class="type">AudioUnitSetProperty</span>(audioUnit, kAudioUnitProperty_SetRenderCallback, kAudioUnitScope_Group, busZero, &amp;callbackStruct, <span class="type">UInt32</span>(<span class="type">MemoryLayout</span>.size(ofValue: callbackStruct)))</span><br><span class="line"><span class="comment">//启动AudioUnit</span></span><br><span class="line">status = <span class="type">AudioOutputUnitStart</span>(audioUnit)</span><br></pre></td></tr></table></figure><p><code>AURenderCallbackStruct</code>有两个参数，一个是<code>AURenderCallback</code>的函数指针，在Swift中使用一个闭包传递进去，因为C的函数指针不允许捕获外部对象，不能使用<code>self</code>调用方法，所以<code>AURenderCallbackStruct</code>第二个参数可以把<code>self</code>的指针传递到<code>AURenderCallback</code>函数中，以备使用。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><blockquote><p>本文Demo：<a href="https://github.com/zhaofucheng1129/GreatApp" target="_blank" rel="noopener">https://github.com/zhaofucheng1129/GreatApp</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在iOS平台上，所有的音频框架都是基于AudioUnit实现的，使用AudioUnit会给你带来最大的自由度。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/Art/Audio_frameworks_2x.png&quot; alt=&quot;iOS平台音频框架层次图&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;headerlink&quot; title=&quot;使用场景&quot;&gt;&lt;/a&gt;使用场景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Simultaneous audio I/O (input and output) with low latency, such as for a VoIP (Voice over Internet Protocol) application&lt;/li&gt;
&lt;li&gt;低延迟的音频I/O场景，比如VoIP（俗称网络电话）&lt;/li&gt;
&lt;li&gt;Responsive playback of synthesized sounds, such as for musical games or synthesized musical instruments&lt;/li&gt;
&lt;li&gt;多路声音合成回放，比如游戏、音乐合成器&lt;/li&gt;
&lt;li&gt;Use of a specific audio unit feature such as acoustic echo cancelation, mixing, or tonal equalization&lt;/li&gt;
&lt;li&gt;使用AudioUnit特有功能，比如回声消除、混合、均衡器等&lt;/li&gt;
&lt;li&gt;A processing-chain architecture that lets you assemble audio processing modules into flexible networks. This is the only audio API in iOS offering this capability.&lt;/li&gt;
&lt;li&gt;想使用音频处理模块组成一个处理链网络（一种图状的数据结构），在iOS平台中AudioUnit是唯一提供这种功能的API&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="音视频" scheme="http://softdevblog.com/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS的数据持久化总结</title>
    <link href="http://softdevblog.com/2019/03/19/iOS%E7%9A%84%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E6%80%BB%E7%BB%93/"/>
    <id>http://softdevblog.com/2019/03/19/iOS的数据持久化总结/</id>
    <published>2019-03-19T12:22:13.000Z</published>
    <updated>2019-03-20T18:10:03.074Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/03/19/iOS的数据持久化总结/cover.jpg" title="数据持久化"><h3 id="0x01、UserDefaults"><a href="#0x01、UserDefaults" class="headerlink" title="0x01、UserDefaults"></a>0x01、UserDefaults</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol><li><code>UserDefaults</code>是一个单利类</li><li>并且是<code>线程安全</code>的</li><li>数据存储在.plist文件中</li><li>一般保存首选项、少量缓存数据</li><li>不能将自定义的对象保存起来</li></ol><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取得单利对象</span></span><br><span class="line"><span class="keyword">let</span> defaults = <span class="type">UserDefaults</span>.standard</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用范型方法保存数据</span></span><br><span class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">set</span><span class="params">(<span class="number">_</span> value: Any?, forKey defaultName: String)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用对应类型的方法获取数据</span></span><br><span class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">string</span><span class="params">(forKey defaultName: String)</span></span> -&gt; <span class="type">String</span>?</span><br><span class="line"></span><br><span class="line"><span class="comment">//早期使用UserDefaults保存数据以后 都要使用synchronize方法 使数据同步到plist中 现在苹果建议 废弃掉此方法 并在未来版本中进行标记 不用在调用 synchronize 了 </span></span><br><span class="line"><span class="comment">//-synchronize is deprecated and will be marked with the NS_DEPRECATED macro in a future release.</span></span><br><span class="line">defaults.synchronize()</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="0x02、Settings-Bundle"><a href="#0x02、Settings-Bundle" class="headerlink" title="0x02、Settings Bundle"></a>0x02、Settings Bundle</h3><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ol><li>无需开发单独的界面，由Settings提供</li><li>用户设置的参数也由Settings提供</li></ol><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><h5 id="新建Bundle"><a href="#新建Bundle" class="headerlink" title="新建Bundle"></a>新建Bundle</h5><p>新建文件 选择 <code>Settings Bundle</code> 类型</p><p><img src="./1.png" alt=""></p><p>自动生成的plist中包含了一些默认设置</p><p><img src="./2.png" alt=""></p><p>在手机的设置中就会生成对应的设置项</p><p><img src="./3.png" alt=""></p><h5 id="按需求修改"><a href="#按需求修改" class="headerlink" title="按需求修改"></a>按需求修改</h5><p>经过一番修改 变成了这个样子</p><p><img src="./4.png" alt=""></p><p>设置界面也变了样子</p><p><img src="./5.png" alt=""></p><h5 id="读取设置"><a href="#读取设置" class="headerlink" title="读取设置"></a>读取设置</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReadSettingsBundle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">readSettings</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> defaults = <span class="type">UserDefaults</span>.standard</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"用户名：<span class="subst">\(defaults.string(forKey: "user_name")</span> ?? "</span><span class="string">")"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"密码是:<span class="subst">\(defaults.string(forKey: "password")</span> ?? "</span><span class="string">")"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"选项是: <span class="subst">\(defaults.string(forKey: "options")</span> ?? "</span><span class="string">")"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"音乐：<span class="subst">\(defaults.bool(forKey: "music_switch")</span>)"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"音量：<span class="subst">\(defaults.float(forKey: "music_value")</span>)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">用户名：aaa</span><br><span class="line">密码是:<span class="number">1234</span></span><br><span class="line">选项是: <span class="number">1</span></span><br><span class="line">音乐：<span class="literal">true</span></span><br><span class="line">音量：<span class="number">0.5998252</span></span><br></pre></td></tr></table></figure><h3 id="0x03、keychain"><a href="#0x03、keychain" class="headerlink" title="0x03、keychain"></a>0x03、keychain</h3><h4 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h4><p>保存的数据不会随着应用卸载而被删除、一般保存密码、登陆Token、UDID等标识。</p><h4 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h4><p>首先在<code>Capabilities</code>中打开<code>Keychain</code></p><p><img src="./6.png" alt=""></p><p><a href="https://developer.apple.com/library/archive/samplecode/GenericKeychain/Introduction/Intro.html#//apple_ref/doc/uid/DTS40007797" target="_blank" rel="noopener">直接给出苹果的样例代码</a></p><p>使用起来也是很麻烦 通常使用第三方库</p><p><a href="https://github.com/kishikawakatsumi/KeychainAccess" target="_blank" rel="noopener">Swift第三方库 <strong>KeychainAccess</strong></a>、<a href="https://github.com/soffes/SAMKeychain" target="_blank" rel="noopener">OC第三方库 <strong>SAMKeychain</strong></a></p><h3 id="0x04、Plist"><a href="#0x04、Plist" class="headerlink" title="0x04、Plist"></a>0x04、Plist</h3><h4 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h4><p>​    可以直接将集合中的数据保存到<code>plist</code>文件中，同样不支持自定义对象。</p><h4 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//保存数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">saveToPlist</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> dict: <span class="type">NSDictionary</span> = [</span><br><span class="line">        <span class="string">"error_code"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"message"</span>: <span class="string">"成功"</span>,</span><br><span class="line">        <span class="string">"list"</span> : [</span><br><span class="line">            [<span class="string">"name"</span>: <span class="string">"张三"</span>, <span class="string">"age"</span>: <span class="number">18</span>],</span><br><span class="line">            [<span class="string">"name"</span>: <span class="string">"李四"</span>, <span class="string">"age"</span>: <span class="number">20</span>]</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> documentPath = <span class="type">NSSearchPathForDirectoriesInDomains</span>(.documentDirectory, .userDomainMask, <span class="literal">true</span>).first!</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> path = <span class="type">URL</span>(fileURLWithPath: documentPath).appendingPathComponent(<span class="string">"dict"</span>).appendingPathExtension(<span class="string">"plist"</span>).path</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Docunemt Path: <span class="subst">\(path)</span>"</span>)</span><br><span class="line"></span><br><span class="line">    dict.write(toFile: path, atomically: <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Plist文件长这个样子</p><p><img src="./7.png" alt="保存的Plist文件"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取Plist文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">readPlist</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">let</span> documentPath = <span class="type">NSSearchPathForDirectoriesInDomains</span>(.documentDirectory, .userDomainMask, <span class="literal">true</span>).first!</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> path = <span class="type">URL</span>(fileURLWithPath: documentPath).appendingPathComponent(<span class="string">"dict"</span>).appendingPathExtension(<span class="string">"plist"</span>).path</span><br><span class="line">        </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Docunemt Path: <span class="subst">\(path)</span>"</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> dict = <span class="type">NSDictionary</span>(contentsOfFile: path) &#123;</span><br><span class="line">    <span class="built_in">print</span>(dict)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"error_code"</span> = <span class="number">0</span>;</span><br><span class="line">    list =     (</span><br><span class="line">                &#123;</span><br><span class="line">            age = <span class="number">18</span>;</span><br><span class="line">            name = <span class="string">"\U5f20\U4e09"</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">            age = <span class="number">20</span>;</span><br><span class="line">            name = <span class="string">"\U674e\U56db"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">    message = <span class="string">"\U6210\U529f"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x05、归档"><a href="#0x05、归档" class="headerlink" title="0x05、归档"></a>0x05、归档</h3><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ol><li>数据存储archive文件中</li><li>可以将自定义的类型归档</li></ol><h4 id="使用-4"><a href="#使用-4" class="headerlink" title="使用"></a>使用</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义一个类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Persion</span>: <span class="title">NSObject</span>, <span class="title">NSCoding</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">"长泽雅美"</span></span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span> = <span class="number">32</span></span><br><span class="line">    <span class="keyword">var</span> sex: <span class="type">String</span> = <span class="string">"女"</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">encode</span><span class="params">(with aCoder: NSCoder)</span></span> &#123;</span><br><span class="line">        aCoder.encode(name, forKey: <span class="string">"name"</span>)</span><br><span class="line">        aCoder.encode(age, forKey: <span class="string">"age"</span>)</span><br><span class="line">        aCoder.encode(sex, forKey: <span class="string">"sex"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        name = aDecoder.decodeObject(forKey: <span class="string">"name"</span>) <span class="keyword">as</span>! <span class="type">String</span></span><br><span class="line">        age = aDecoder.decodeInteger(forKey: <span class="string">"age"</span>)</span><br><span class="line">        sex = aDecoder.decodeObject(forKey: <span class="string">"sex"</span>) <span class="keyword">as</span>! <span class="type">String</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//NSKeyedArchiver</span></span><br><span class="line"><span class="comment">//写入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> documentPath = <span class="type">NSSearchPathForDirectoriesInDomains</span>(.documentDirectory, .userDomainMask, <span class="literal">true</span>).first!</span><br><span class="line"><span class="keyword">let</span> path = <span class="type">URL</span>(fileURLWithPath: documentPath).appendingPathComponent(<span class="string">"person"</span>)</span><br><span class="line"><span class="built_in">print</span>(path)</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">try</span> <span class="type">NSKeyedArchiver</span>.archivedData(withRootObject: <span class="type">Persion</span>(), requiringSecureCoding: <span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">try</span> data.write(to: path)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"归档失败了 <span class="subst">\(error)</span>"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//NSKeyedUnarchiver</span></span><br><span class="line"><span class="comment">//读取</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> data = <span class="type">FileManager</span>.<span class="keyword">default</span>.contents(atPath: path.path),<span class="keyword">let</span> person = <span class="keyword">try</span> <span class="type">NSKeyedUnarchiver</span>.unarchiveTopLevelObjectWithData(data) <span class="keyword">as</span>? <span class="type">Persion</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"名字是：<span class="subst">\(person.name)</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"解档失败了 <span class="subst">\(error)</span>"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//名字是：长泽雅美</span></span><br></pre></td></tr></table></figure><h3 id="0x06、文件"><a href="#0x06、文件" class="headerlink" title="0x06、文件"></a>0x06、文件</h3><p>可以任意保存数据到硬盘上，并且可以移动、拷贝、删除等操作。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//The methods of the shared NSFileManager object can be called from multiple threads safely. </span></span><br><span class="line"><span class="comment">//However, if you use a delegate to receive notifications about the status of move, copy, remove, and link operations,</span></span><br><span class="line"><span class="comment">// you should create a unique instance of the file manager object, assign your delegate to that object, </span></span><br><span class="line"><span class="comment">//and use that file manager to initiate your operations.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建文件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">createFile</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> imageUrl = <span class="type">Bundle</span>.main.url(forResource: <span class="string">"peppa"</span>, withExtension: <span class="string">"jpeg"</span>)!</span><br><span class="line">        <span class="keyword">let</span> documentPath = <span class="type">URL</span>.documentUrl.appendingPathComponent(<span class="string">"Peppa"</span>).appendingPathExtension(<span class="string">"jpg"</span>).path</span><br><span class="line">        <span class="built_in">print</span>(documentPath)</span><br><span class="line">        <span class="type">DispatchQueue</span>.global().async &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> data = <span class="keyword">try</span> <span class="type">Data</span>(contentsOf: imageUrl)</span><br><span class="line">                <span class="keyword">if</span> <span class="type">FileManager</span>.<span class="keyword">default</span>.createFile(atPath: documentPath, contents: data, attributes: <span class="literal">nil</span>) &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">"创建文件成功"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"失败了 <span class="subst">\(error)</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建文件夹</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">createDirectory</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> directoryUrl = <span class="type">URL</span>.documentUrl.appendingPathComponent(<span class="string">"父文件夹"</span>, isDirectory: <span class="literal">true</span>).appendingPathComponent(<span class="string">"子文件夹"</span>, isDirectory: <span class="literal">true</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"文件夹路径: <span class="subst">\(directoryUrl)</span>"</span>)</span><br><span class="line">        <span class="type">DispatchQueue</span>.global().async &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> <span class="type">FileManager</span>.<span class="keyword">default</span>.createDirectory(at: directoryUrl, withIntermediateDirectories: <span class="literal">true</span>, attributes: <span class="literal">nil</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"文件夹创建成功"</span>)</span><br><span class="line">            &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"失败了 <span class="subst">\(error)</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//读取文件夹</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">readDirectory</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="type">DispatchQueue</span>.global().async &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> enumerator = <span class="type">FileManager</span>.<span class="keyword">default</span>.enumerator(atPath: <span class="type">String</span>.documentPath) &#123;</span><br><span class="line">                <span class="keyword">for</span> <span class="keyword">case</span> <span class="keyword">let</span> path <span class="keyword">as</span> <span class="type">String</span> <span class="keyword">in</span> enumerator &#123;</span><br><span class="line">                    <span class="built_in">print</span>(path)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除文件夹</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">deleteItem</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> directoryUrl = <span class="type">URL</span>.documentUrl.appendingPathComponent(<span class="string">"父文件夹"</span>, isDirectory: <span class="literal">true</span>)</span><br><span class="line">        <span class="type">DispatchQueue</span>.global().async &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> <span class="type">FileManager</span>.<span class="keyword">default</span>.removeItem(at: directoryUrl)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"删除成功"</span>)</span><br><span class="line">            &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"失败了 <span class="subst">\(error)</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x07、sqlite3"><a href="#0x07、sqlite3" class="headerlink" title="0x07、sqlite3"></a>0x07、sqlite3</h3><h4 id="特点-4"><a href="#特点-4" class="headerlink" title="特点"></a>特点</h4><ol><li>使用C语言编写、因此使用不太方便</li><li>数据存储在.db3数据库中</li><li>可以存储大量数据，并且存储、检索比较高效</li></ol><h4 id="使用-5"><a href="#使用-5" class="headerlink" title="使用"></a>使用</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLiteDB</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> db:<span class="type">OpaquePointer</span>? = <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> fm = &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">FileManager</span>.<span class="keyword">default</span></span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> dbPath = &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] () -&gt; <span class="type">String</span> <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">let</span> documentPath = <span class="keyword">self</span>?.fm.urls(<span class="keyword">for</span>: .documentDirectory, <span class="keyword">in</span>: .userDomainMask).first!</span><br><span class="line">        <span class="keyword">let</span> dbPath = documentPath!.appendingPathComponent(<span class="string">"data"</span>).appendingPathExtension(<span class="string">"db"</span>).path</span><br><span class="line">        <span class="keyword">return</span> dbPath</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">createDB</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> !fm.isExecutableFile(atPath: dbPath) &#123;</span><br><span class="line">            <span class="keyword">if</span> fm.createFile(atPath: dbPath, contents: <span class="literal">nil</span>, attributes: <span class="literal">nil</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> openDB()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"数据库创建失败"</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> openDB()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">openDB</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> cPath = dbPath.cString(using: .utf8)!</span><br><span class="line">        <span class="keyword">let</span> error = sqlite3_open(cPath, &amp;db)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> error != <span class="type">SQLITE_OK</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"数据库打开失败"</span>)</span><br><span class="line">            sqlite3_close(db)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"数据库打开成功"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">createTable</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">assert</span>(db != <span class="literal">nil</span>, <span class="string">"数据库没有正确打开"</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> createTableSql = <span class="string">"create table if not exists t_user(uid integer primary key AUTOINCREMENT,uname varchar(20),mobile varchar(20))"</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> cSql = createTableSql.cString(using: .utf8)</span><br><span class="line">        <span class="keyword">var</span> errMsg: <span class="type">UnsafeMutablePointer</span>&lt;<span class="type">Int8</span>&gt;?</span><br><span class="line">        <span class="keyword">let</span> result = sqlite3_exec(db, cSql!, <span class="literal">nil</span>, <span class="literal">nil</span>, &amp;errMsg)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> result != <span class="type">SQLITE_OK</span> &#123;</span><br><span class="line">            sqlite3_free(errMsg)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> error = <span class="type">String</span>(validatingUTF8: sqlite3_errmsg(db)) &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"SQLiteDB - failed to prepare SQL: <span class="subst">\(createTableSql)</span>, Error: <span class="subst">\(error)</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        sqlite3_free(errMsg)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"创建成功"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">assert</span>(db != <span class="literal">nil</span>, <span class="string">"数据库没有正确打开"</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"插入数据开始"</span>)</span><br><span class="line">        beginTransaction()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> stmt: <span class="type">OpaquePointer</span>?</span><br><span class="line">        <span class="keyword">var</span> sql = <span class="string">""</span></span><br><span class="line">        <span class="keyword">var</span> cSql:[<span class="type">CChar</span>]?</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...<span class="number">100</span> &#123;</span><br><span class="line">            sql = <span class="string">"insert into t_user(uname,mobile) values('user<span class="subst">\(i)</span>','13<span class="subst">\(i)</span>')"</span></span><br><span class="line">            cSql = sql.cString(using: .utf8)</span><br><span class="line">            <span class="keyword">if</span> sqlite3_prepare_v2(db, cSql!, -<span class="number">1</span>, &amp;stmt, <span class="literal">nil</span>) != <span class="type">SQLITE_OK</span> &#123;</span><br><span class="line">                sqlite3_finalize(stmt)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"执行失败"</span>)</span><br><span class="line">                rollback()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> sqlite3_step(stmt) != <span class="type">SQLITE_DONE</span> &#123;</span><br><span class="line">                    sqlite3_finalize(stmt)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">"执行失败"</span>)</span><br><span class="line">                    rollback()</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sqlite3_finalize(stmt)</span><br><span class="line">        </span><br><span class="line">        commitTransaction()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"插入数据成功"</span>)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//开启事物</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">beginTransaction</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> errMsg: <span class="type">UnsafeMutablePointer</span>&lt;<span class="type">Int8</span>&gt;?</span><br><span class="line">        <span class="comment">//开启事物</span></span><br><span class="line">        <span class="comment">//SQL国际标准使用START TRANSACTION开始一个事务（也可以用方言命令BEGIN）。COMMIT语句使事务成功完成。ROLLBACK语句结束事务，放弃从BEGIN TRANSACTION开始的一切变更。若autocommit被START TRANSACTION的使用禁止，在事务结束时autocommit会重新激活。</span></span><br><span class="line">        <span class="keyword">let</span> result = sqlite3_exec(db, <span class="string">"BEGIN"</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, &amp;errMsg)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> result != <span class="type">SQLITE_OK</span> &#123;</span><br><span class="line">            sqlite3_free(errMsg)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"启动事物失败"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        sqlite3_free(errMsg)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"启动事物成功"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//提交事物</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">commitTransaction</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> errMsg: <span class="type">UnsafeMutablePointer</span>&lt;<span class="type">Int8</span>&gt;?</span><br><span class="line">        <span class="keyword">if</span> sqlite3_exec(db, <span class="string">"COMMIT"</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, &amp;errMsg) != <span class="type">SQLITE_OK</span> &#123;</span><br><span class="line">            sqlite3_free(errMsg)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"提交事物失败"</span>)</span><br><span class="line">            rollback()</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        sqlite3_free(errMsg)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"提交事物成功"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//回滚事物</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">rollback</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> errMsg: <span class="type">UnsafeMutablePointer</span>&lt;<span class="type">Int8</span>&gt;?</span><br><span class="line">        <span class="keyword">if</span> sqlite3_exec(db, <span class="string">"ROLLBACK"</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, &amp;errMsg) == <span class="type">SQLITE_OK</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"回滚成功"</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"回滚失败"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        sqlite3_free(errMsg)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(ids:[Int])</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ids.<span class="built_in">count</span> &lt;= <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"删除数据开始"</span>)</span><br><span class="line">        </span><br><span class="line">        beginTransaction()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> errMsg: <span class="type">UnsafeMutablePointer</span>&lt;<span class="type">Int8</span>&gt;?</span><br><span class="line">        <span class="keyword">var</span> sql = <span class="string">""</span></span><br><span class="line">        <span class="keyword">var</span> cSql:[<span class="type">CChar</span>]?</span><br><span class="line">        <span class="keyword">for</span> id <span class="keyword">in</span> ids &#123;</span><br><span class="line">            sql = <span class="string">"delete from t_user where uid = <span class="subst">\(id)</span>"</span></span><br><span class="line">            cSql = sql.cString(using: .utf8)</span><br><span class="line">            <span class="keyword">if</span> sqlite3_exec(db, cSql, <span class="literal">nil</span>, <span class="literal">nil</span>, &amp;errMsg) != <span class="type">SQLITE_OK</span> &#123;</span><br><span class="line">                sqlite3_free(errMsg)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> error = <span class="type">String</span>(validatingUTF8: sqlite3_errmsg(db)) &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">"SQLiteDB - 执行SQL: <span class="subst">\(sql)</span>, Error: <span class="subst">\(error)</span>"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                rollback()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        commitTransaction()</span><br><span class="line">        sqlite3_free(errMsg)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"删除数据成功"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(id:Int)</span></span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"开始更新"</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> sql = <span class="string">"update t_user set uname = '长泽雅美' where uid = <span class="subst">\(id)</span>"</span></span><br><span class="line">        <span class="keyword">var</span> errMsg: <span class="type">UnsafeMutablePointer</span>&lt;<span class="type">Int8</span>&gt;?</span><br><span class="line">        <span class="keyword">if</span> sqlite3_exec(db, sql.cString(using: .utf8), <span class="literal">nil</span>, <span class="literal">nil</span>, &amp;errMsg) != <span class="type">SQLITE_OK</span> &#123;</span><br><span class="line">            sqlite3_free(errMsg)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> error = <span class="type">String</span>(validatingUTF8: sqlite3_errmsg(db)) &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"SQLiteDB - 执行SQL: <span class="subst">\(sql)</span>, Error: <span class="subst">\(error)</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        sqlite3_free(errMsg)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"更新结束"</span>)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">query</span><span class="params">(lessThan: Int)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"执行查询"</span>)</span><br><span class="line">        <span class="keyword">let</span> sql = <span class="string">"select * from t_user where uid &lt; ?"</span></span><br><span class="line">        <span class="keyword">var</span> stmt: <span class="type">OpaquePointer</span>?</span><br><span class="line">        <span class="keyword">if</span> sqlite3_prepare_v2(db, sql.cString(using: .utf8), -<span class="number">1</span>, &amp;stmt, <span class="literal">nil</span>) != <span class="type">SQLITE_OK</span> &#123;</span><br><span class="line">            sqlite3_finalize(stmt)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> error = <span class="type">String</span>(validatingUTF8: sqlite3_errmsg(db)) &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"准备SQL: <span class="subst">\(sql)</span>, Error: <span class="subst">\(error)</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"查询编译成功"</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> sqlite3_bind_int(stmt, <span class="number">1</span>, <span class="type">CInt</span>(lessThan)) != <span class="type">SQLITE_OK</span> &#123;</span><br><span class="line">            sqlite3_finalize(stmt)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> error = <span class="type">String</span>(validatingUTF8:sqlite3_errmsg(<span class="keyword">self</span>.db)) &#123;</span><br><span class="line">                <span class="keyword">let</span> msg = <span class="string">"绑定参数 SQL: <span class="subst">\(sql)</span>, uid: <span class="subst">\(lessThan)</span>, 位置: <span class="subst">\(<span class="number">1</span>)</span> Error: <span class="subst">\(error)</span>"</span></span><br><span class="line">                <span class="type">NSLog</span>(msg)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"查询执行成功"</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//循环取得每一行</span></span><br><span class="line">        <span class="keyword">while</span> sqlite3_step(stmt) == <span class="type">SQLITE_ROW</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> columnCount = sqlite3_column_count(stmt)</span><br><span class="line">            <span class="keyword">let</span> uid = sqlite3_column_int(stmt, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">let</span> uname = <span class="type">String</span>(cString: sqlite3_column_text(stmt, <span class="number">1</span>))</span><br><span class="line">            <span class="keyword">let</span> mobile = <span class="type">String</span>(cString: sqlite3_column_text(stmt, <span class="number">2</span>))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"每条记录有<span class="subst">\(columnCount)</span>列，第一列uid:<span class="subst">\(uid)</span>, 第二列uname:<span class="subst">\(uname)</span>,第三列mobile:<span class="subst">\(mobile)</span>"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        sqlite3_finalize(stmt)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"查询结束"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">dropTable</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> sql = <span class="string">"drop table if exists t_user"</span></span><br><span class="line">        <span class="keyword">var</span> errMsg: <span class="type">UnsafeMutablePointer</span>&lt;<span class="type">Int8</span>&gt;?</span><br><span class="line">        <span class="keyword">if</span> sqlite3_exec(db, sql.cString(using: .utf8), <span class="literal">nil</span>, <span class="literal">nil</span>, &amp;errMsg) != <span class="type">SQLITE_OK</span> &#123;</span><br><span class="line">            sqlite3_free(errMsg)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> error = <span class="type">String</span>(validatingUTF8: sqlite3_errmsg(db)) &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"删除表失败 SQL: <span class="subst">\(sql)</span>, Error: <span class="subst">\(error)</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"删除表成功"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">closeDB</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> db != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> result = sqlite3_close_v2(db)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> result != <span class="type">SQLITE_OK</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> error = <span class="type">String</span>(validatingUTF8: sqlite3_errmsg(db)) &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">"关闭数据库失败 Error: <span class="subst">\(error)</span>"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"关闭数据库成功"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><p><img src="./8.png" alt=""></p><p>直接使用<code>sqlite</code>库很麻烦 一般使用第三方的封装</p><p><a href="https://github.com/stephencelis/SQLite.swift" target="_blank" rel="noopener">Swift第三方库 <strong>SQLite.swift</strong></a>、<a href="https://github.com/ccgus/fmdb" target="_blank" rel="noopener">OC第三方库 <strong>FMDB</strong></a></p><h3 id="0x08、Core-Data"><a href="#0x08、Core-Data" class="headerlink" title="0x08、Core Data"></a>0x08、Core Data</h3><h4 id="特点-5"><a href="#特点-5" class="headerlink" title="特点"></a>特点</h4><ol><li>是一个面向对象的持久化框架</li><li>持久化层可以选择<code>SQLite</code>、<code>XML</code>、甚至内存</li></ol><h4 id="使用-6"><a href="#使用-6" class="headerlink" title="使用"></a>使用</h4><p><strong>CoreData 是一个博大精深的技术，不要妄想几天之内可以用的很溜。</strong><br><strong>CoreData 是一个博大精深的技术，不要妄想几天之内可以用的很溜。</strong><br><strong>CoreData 是一个博大精深的技术，不要妄想几天之内可以用的很溜。</strong></p><p><strong>如果没有足够的时间和精力去接入 Core Data。 那选型的时候应当慎重考虑。</strong></p><p>这里给出一个基础的介绍文章 <a href="https://juejin.im/post/5a6ec04ef265da3e4b77099a" target="_blank" rel="noopener">Swift实现CoreData存储数据</a></p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><blockquote><p>本文Demo：<a href="https://github.com/zhaofucheng1129/Swift_Persistence" target="_blank" rel="noopener">https://github.com/zhaofucheng1129/Swift_Persistence</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2019/03/19/iOS的数据持久化总结/cover.jpg&quot; title=&quot;数据持久化&quot;&gt;
&lt;h3 id=&quot;0x01、UserDefaults&quot;&gt;&lt;a href=&quot;#0x01、UserDefaults&quot; class=&quot;headerlink&quot; title=&quot;0x01、UserDefaults&quot;&gt;&lt;/a&gt;0x01、UserDefaults&lt;/h3&gt;&lt;h4 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;UserDefaults&lt;/code&gt;是一个单利类&lt;/li&gt;
&lt;li&gt;并且是&lt;code&gt;线程安全&lt;/code&gt;的&lt;/li&gt;
&lt;li&gt;数据存储在.plist文件中&lt;/li&gt;
&lt;li&gt;一般保存首选项、少量缓存数据&lt;/li&gt;
&lt;li&gt;不能将自定义的对象保存起来&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h4&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//取得单利对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; defaults = &lt;span class=&quot;type&quot;&gt;UserDefaults&lt;/span&gt;.standard&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//使用范型方法保存数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; value: Any?, forKey defaultName: String)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//使用对应类型的方法获取数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(forKey defaultName: String)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//早期使用UserDefaults保存数据以后 都要使用synchronize方法 使数据同步到plist中 现在苹果建议 废弃掉此方法 并在未来版本中进行标记 不用在调用 synchronize 了 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//-synchronize is deprecated and will be marked with the NS_DEPRECATED macro in a future release.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;defaults.synchronize()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="基础知识" scheme="http://softdevblog.com/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="持久化" scheme="http://softdevblog.com/tags/%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>基于Docker搭建LNPM环境</title>
    <link href="http://softdevblog.com/2018/11/06/%E5%9F%BA%E4%BA%8EDocker%E6%90%AD%E5%BB%BALNPM%E7%8E%AF%E5%A2%83/"/>
    <id>http://softdevblog.com/2018/11/06/基于Docker搭建LNPM环境/</id>
    <published>2018-11-06T09:31:02.000Z</published>
    <updated>2018-11-07T10:38:50.287Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/11/06/基于Docker搭建LNPM环境/docker.png" title="Docker"><!-- ![Docker](./docker.png) --><h1 id="基于Docker搭建LNPM环境"><a href="#基于Docker搭建LNPM环境" class="headerlink" title="基于Docker搭建LNPM环境"></a>基于Docker搭建LNPM环境</h1><p>​    作为一只iOS前端工程师，最近对PHP产生了兴趣，我认为这不属于不务正业，作为一个程序员不应该把自己局限在一个封闭的领域当中，应该时刻保持好奇心，所以我对<code>“世界上最好的语言”</code>开始了探索～</p><p>​    工欲善其事，必先利其器，首先就要搭建开发环境，由于本人不喜欢因为开发环境把自己的电脑搞得乱七八糟，乱安装一些有的没的依赖开发包，所以我选择<code>虚拟机+Docker</code>来搭建环境～</p><p>​    下面我们开始：</p><h2 id="Docker准备"><a href="#Docker准备" class="headerlink" title="Docker准备"></a>Docker准备</h2><p>​      我选择了完全兼容<code>Redhat</code>系统的<code>CentOS7</code>发行版<code>Linux</code>系统，下载<code>Linux</code>并且虚拟机安装系统这里就省略了，准备好<code>Linux</code>系统就可以开始安装<code>Docker</code>了。</p><h3 id="删除旧版本"><a href="#删除旧版本" class="headerlink" title="删除旧版本"></a>删除旧版本</h3><p>如果以前安装过想重新安装新版本请先使用下面的命令卸载旧版本的<code>Docker</code>，第一次安装请直接到第二步</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Docker安装设置"><a href="#Docker安装设置" class="headerlink" title="Docker安装设置"></a>Docker安装设置</h3><p><code>Docker</code>提供两种安装方式，官方推荐使用软件仓库的方式安装<code>Docker</code>，方便更新等操作，另一种是以RPM的方式安装，这里不做介绍～</p><p>直接用官方推荐的方式安装，首先设置<code>Docker</code>的软件仓库</p><h4 id="设置Docker的官方软件仓库"><a href="#设置Docker的官方软件仓库" class="headerlink" title="设置Docker的官方软件仓库"></a>设置Docker的官方软件仓库</h4><ol><li><p>先安装Docker依赖的软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure></li><li><p>设置稳定版本的<code>Docker</code>仓库地址，<code>Docker</code>还提供了测试版本的地址，这里我们不需要，只要稳定版本就可以了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li></ol><h4 id="正式安装Docker"><a href="#正式安装Docker" class="headerlink" title="正式安装Docker"></a>正式安装Docker</h4><ol><li><p>安装<code>Docker</code>的最新版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo yum install docker-ce</span><br></pre></td></tr></table></figure></li><li><p>启动<code>Docker</code>服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo systemctl start docker</span><br></pre></td></tr></table></figure></li><li><p>测试<code>Docker</code>是否工作正常</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo docker run hello-world</span><br></pre></td></tr></table></figure><p>如果输出了 <code>hello world</code>说明Docker已经安装正常了</p></li></ol><h2 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h2><p>​        <code>Dockerfile</code>是用来制作镜像使用的一系列<code>Docker</code>命令的脚本文件，<code>docker build</code>命令会根据Dockerfile中的设置生成我们自定义的镜像。</p><p>​    首先准备好一个目录结构如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">testphp#你自定义的一个目录名</span><br><span class="line">├── html #用作Nginx的站点目录</span><br><span class="line">│   └── phptest#子目录可以自定义</span><br><span class="line">│       ├── index.php        #一段简单的PHP代码,比如&lt;?php phpinfo();?&gt;</span><br><span class="line">├── mysql#Mysql数据库相关的目录</span><br><span class="line">│   ├── conf#Mysql配置文件目录</span><br><span class="line">│   └── data#Mysql数据目录</span><br><span class="line">├── nginx#Nginx相关目录</span><br><span class="line">│   ├── conf#Nginx配置文件目录</span><br><span class="line">│   └── logs#Nginx日记目录</span><br><span class="line">└── php-mysqli#我们需要根据官方镜像生成支持mysqli的镜像，此为自定义目录</span><br><span class="line">    └── Dockerfile#生成自定义镜像的Dockerfile</span><br></pre></td></tr></table></figure><p>​    在<code>php-mysqli</code>目录下的<code>Dockerfile</code>文件中，输入如下内容:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM php:7.2.11-fpm#基于PHP官方镜像7.2.11-fpm版本制作自定义镜像</span><br><span class="line"></span><br><span class="line">RUN docker-php-ext-install mysqli                #安装PHP扩展支持mysqli</span><br></pre></td></tr></table></figure><p>完成以后不用手动运行<code>docker build</code>命令生成镜像，稍后使用<code>docker-compose</code>自动帮我们构建镜像。</p><h2 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h2><p>​    <code>docker-compose</code>是<code>Docker</code>提供的用于管理多个<code>Docekr</code>容器的工具，<code>Docker</code>推荐的理念是，一个容器运行一个服务进程，这里我们搭建的环境包括，一个<code>PHP</code>服务进程、一个<code>Nginx</code>服务进程、一个<code>phpadmin</code>进程（用于方便的操作<code>mysql</code>数据库的工具）、一个<code>mysql</code>服务进程，总共4个，所以需要先安装<code>docker-compose</code>。</p><ol><li><p>下载<code>docker-compose</code>命令文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L "https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></li><li><p>为<code>docker-compose</code>命令文件赋予可执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></li><li><p>测试安装是否正确</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo docker-compose --version</span><br></pre></td></tr></table></figure><p>如果正常输出版本号说明安装完成</p></li></ol><h2 id="编写docker-compose-yml"><a href="#编写docker-compose-yml" class="headerlink" title="编写docker-compose.yml"></a>编写docker-compose.yml</h2><p>​        <code>docker-compose</code>命令可以根据我们编写的<code>docker-compose.yml</code>文件自动的管理<code>Docker</code>镜像。</p><p>​      在我们自己建立的根目录下面新建一个<code>docker-compose.yml</code>，输入如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">version: '3'#指定docker-compose文件的版本，低版本不支持services、</span><br><span class="line">services:#networks等标签</span><br><span class="line">  phpmyadmin:</span><br><span class="line">    image: phpmyadmin/phpmyadmin                #使用的镜像</span><br><span class="line">    ports:#端口映射</span><br><span class="line">      - "8080:80"</span><br><span class="line">    depends_on:#此服务要依赖于mysql服务</span><br><span class="line">      - mysql</span><br><span class="line">    links:#连接到mysql服务</span><br><span class="line">      - mysql:db</span><br><span class="line">    networks:#指定内部网络</span><br><span class="line">      - app_net</span><br><span class="line">  nginx:</span><br><span class="line">    image: nginx:latest</span><br><span class="line">    ports:</span><br><span class="line">      - "80:80"#容器中的80端口映射到HOST的80端口</span><br><span class="line">    depends_on:</span><br><span class="line">      - "php"</span><br><span class="line">    volumes:#指定挂载的文件或目录</span><br><span class="line">      - "./nginx/conf/nginx.conf:/etc/nginx/nginx.conf"</span><br><span class="line">      - "./html:/home:ro"</span><br><span class="line">    networks:</span><br><span class="line">      - app_net</span><br><span class="line">    container_name: "compose-nginx"                #指定容器名字</span><br><span class="line">  php:</span><br><span class="line">    build: ./php-mysqli        #这里指定Dockerfile的路径 会帮我们自动构建镜像</span><br><span class="line">    image: php:7.2.11-fpm-mysqli</span><br><span class="line">    ports:</span><br><span class="line">      - "9000:9000"</span><br><span class="line">    depends_on:</span><br><span class="line">      - mysql</span><br><span class="line">    volumes:#这里的挂载目录要和nginx中的一样，否则找不到php文件</span><br><span class="line">      - "./html:/home"</span><br><span class="line">    networks:</span><br><span class="line">      - app_net</span><br><span class="line">    container_name: "compose-php"</span><br><span class="line">  mysql:</span><br><span class="line">    image: mysql:5.7.24        #数据库镜像版本</span><br><span class="line">    ports:</span><br><span class="line">          - "3306:3306"</span><br><span class="line">    volumes:</span><br><span class="line">      - "./mysql/data:/var/lib/mysql"</span><br><span class="line">      - "./mysql/conf/my.cnf:/etc/mysql/my.cnf"</span><br><span class="line">    environment:#镜像内部使用的环境变量，这里用来折纸数据库的密码</span><br><span class="line">      - MYSQL_ROOT_PASSWORD=zhaofucheng</span><br><span class="line">    networks:</span><br><span class="line">      app_net:</span><br><span class="line">        ipv4_address: 10.10.10.1                #指定内部网络中的IP地址</span><br><span class="line">    container_name: "compose-mysql"</span><br><span class="line">networks:</span><br><span class="line">  app_net:</span><br><span class="line">    driver: bridge#网络模式用桥接</span><br><span class="line">    ipam:</span><br><span class="line">      config:</span><br><span class="line">        - subnet: 10.10.0.0/16                #使用CIDR方式子网划分</span><br></pre></td></tr></table></figure><h2 id="准备Nginx和Mysql的配置文件"><a href="#准备Nginx和Mysql的配置文件" class="headerlink" title="准备Nginx和Mysql的配置文件"></a>准备Nginx和Mysql的配置文件</h2><p>​    这里我们需要把配置文件放到我们的指定的目录中，稍后更改配置不需要进入到容器内部，也能更好的管理配置我们的服务。</p><p>​    有两种方式准备镜像文件，一是自己从头编写，而是从镜像当中复制一个默认的再根据自己的需要去修改，这里我们选择从镜像当中复制。</p><h3 id="Nginx配置文件"><a href="#Nginx配置文件" class="headerlink" title="Nginx配置文件"></a>Nginx配置文件</h3><p>​    准备Nginx配置文件</p><h4 id="复制Nginx文件"><a href="#复制Nginx文件" class="headerlink" title="复制Nginx文件"></a>复制Nginx文件</h4><ol><li><p>启动一个临时容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo docker run --name tmp-nginx-container -d nginx</span><br></pre></td></tr></table></figure></li><li><p>从临时<code>nginx</code>镜像当中复制配置文件 放到我们自己建立的<code>nginx/conf</code>目录中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo docker cp tmp-nginx-container:/etc/nginx/nginx.conf ./nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure></li><li><p>删除建立的临时容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo docker rm -f tmp-nginx-container</span><br></pre></td></tr></table></figure></li></ol><h4 id="编辑Nginx配置文件"><a href="#编辑Nginx配置文件" class="headerlink" title="编辑Nginx配置文件"></a>编辑Nginx配置文件</h4><p>编辑文件内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">user  nginx;</span><br><span class="line">worker_processes  2;                        #根据CPU核心数量指定工作线程的数量，这里我的虚拟机为2核心</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">#日志记录的格式</span><br><span class="line">    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span><br><span class="line">                      '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">                      '"$http_user_agent" "$http_x_forwarded_for"';</span><br><span class="line">#访问日志的目录地址</span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;#监听端口</span><br><span class="line">        server_name  test.ng;#虚拟主机的名称，稍后要写入到本机的host文件当中</span><br><span class="line">        root /home/phptest;#项目php的路径</span><br><span class="line"></span><br><span class="line">        access_log  /var/log/nginx/access.log  main;</span><br><span class="line">        error_log /var/log/nginx/error.log error;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                index  index.html index.htm index.php;</span><br><span class="line">        &#125;</span><br><span class="line">#配置所有访问php的请求都交给PHP: FastCGI 进程管理器处理</span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">                fastcgi_pass   php:9000;#这里是在docker-compose.yml文件中指定的服务名和端口号</span><br><span class="line">                fastcgi_index  index.php;#默认寻找的php入口页面</span><br><span class="line">                fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">                include        fastcgi_params; #网络上还有另一种方式 include fastcgi.conf; 由于要引入一个新的配置文件 这里我就嫌麻烦就使用这种方式了 根据个人喜好自己选择吧</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Mysql配置文件"><a href="#Mysql配置文件" class="headerlink" title="Mysql配置文件"></a>Mysql配置文件</h3><p>​    同样复制<code>Mysql</code>的配置文件</p><ol><li><p>启动一个临时的<code>Mysql</code>容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo docker run --name tmp-mysql-container -d mysql:5.7.24</span><br></pre></td></tr></table></figure></li><li><p>从临时的<code>Mysql</code>容器中复制配置文件到我们指定的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo docker cp tmp-mysql-container:/etc/mysql/my.cnf ./mysql/conf/my.conf</span><br></pre></td></tr></table></figure></li><li><p>删除临时的<code>Mysql</code>容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo docker rm -f tmp-mysql-container</span><br></pre></td></tr></table></figure><p>这里我们使用默认的mysql配置就可以了。</p></li></ol><h2 id="查看虚拟机的IP地址加入到host文件当中"><a href="#查看虚拟机的IP地址加入到host文件当中" class="headerlink" title="查看虚拟机的IP地址加入到host文件当中"></a>查看虚拟机的IP地址加入到host文件当中</h2><p>​    在虚拟机的终端中输入:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ifconfig eth0 #查看默认网卡的信息</span><br><span class="line"></span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.31.150  netmask 255.255.255.0  broadcast 192.168.31.255</span><br><span class="line">        inet6 fe80::caec:3251:7864:4814  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:1c:42:a4:5b:ef  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 2341561  bytes 1335991534 (1.2 GiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 520557  bytes 56885302 (54.2 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>​    其中的<code>inet 192.168.31.150</code>就是我们虚拟机的IP地址，我本人的电脑是Mac系统，所以回到在我的Mac系统电脑的终端中输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo vim /etc/hosts</span><br></pre></td></tr></table></figure><p>​    将我们指定的虚拟主机名和IP地址以如下格式加入到host文件中 然后保存退出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192.168.31.150 test.ng#Ngxin服务地址</span><br><span class="line">192.168.31.150:8080 phpadmin.net        #用于访问PhpAdmin服务</span><br></pre></td></tr></table></figure><p>​         稍后我们就可以直接在浏览器中输入<code>http://test.ng/</code>访问<code>Nginx</code>测试了。</p><h2 id="启动我们的服务"><a href="#启动我们的服务" class="headerlink" title="启动我们的服务"></a>启动我们的服务</h2><p>​    回到虚拟机中，我们目前为止的文件结构如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">testphp</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">├── html</span><br><span class="line">│   └── phptest</span><br><span class="line">│       ├── index.php</span><br><span class="line">│       ├── testmysql.php</span><br><span class="line">├── mysql</span><br><span class="line">│   ├── conf</span><br><span class="line">│   │   └── my.cnf</span><br><span class="line">│   └── data</span><br><span class="line">├── nginx</span><br><span class="line">│   ├── conf</span><br><span class="line">│   │   └── nginx.conf</span><br><span class="line">│   └── logs</span><br><span class="line">└── php-mysqli</span><br><span class="line">    └── Dockerfile</span><br></pre></td></tr></table></figure><p>​    编辑我们的<code>index.php</code>文件，输入如下内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">phpinfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>有些人不输入<code>&lt;?php</code> 而是直接写<code>&lt;?</code>，导致出现错误，还得修改什么<code>php.ini</code>配置项，这里我建议就别给自己找麻烦，按照标准写法就可以了，别起什么幺蛾子～</p><p>编辑<code>testmysql.php</code>文件用来测试能否连接到<code>Mysql</code>数据库，输入如下内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  $db = <span class="keyword">new</span> mysqli(<span class="string">'10.10.10.1:3306'</span>,<span class="string">'root'</span>,<span class="string">'zhaofucheng'</span>,<span class="string">'testdatabase'</span>);</span><br><span class="line">  <span class="keyword">if</span> (mysqli_connect_errno()) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'Error: Could not connect to database. Please try again later.'</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'The connection is successful.'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  $db-&gt;close();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​    确保我们在自己定义的根目录中输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">testphp]$</span> sudo /usr/local/bin/docker-compose up -d</span><br><span class="line"><span class="meta">testphp]$</span> sudo docker ps</span><br></pre></td></tr></table></figure><p>​    如果输入完成后可以看到四个容器都启动了，那么代表我们成功了，如果出现了错误，请回到上面仔细对照配置项，或者<code>Google</code>、<code>Baidu</code>以及留言给我一起解决～</p><h2 id="测试我们的服务"><a href="#测试我们的服务" class="headerlink" title="测试我们的服务"></a>测试我们的服务</h2><p>先在我们自己电脑的浏览器中输入地址<code>http://test.ng/</code>,成功页面如下图：</p><p><img src="./phpinfo.png" alt="PHP信息"></p><p>以上代表我们的<code>Nginx</code>和<code>PHP</code>已经配合完美了～～</p><p>再来测试<code>phpMyAdmin</code>是否也成功启动了，在浏览器中输入地址<code>http://phpadmin.net</code>访问，成功页面如下图：</p><p><img src="./phpadmin.png" alt="phpMyAdmin登陆"></p><p>​    出现上图代表<code>phpMyAdmin</code>启动成功，如果输入我们配置的<code>Mysql</code>密码可以正常登陆，代表<code>phpMyAdmin</code>和<code>Mysql</code>配合完美了～</p><p>这里如果登陆成功了，现在数据库中新建一个名叫<code>testdatabase</code>数据库，用来给我们测试<code>PHP</code>是否能正常连接到<code>Mysql</code>，</p><p>现在见证奇迹的时刻到了～，在浏览器中输入<code>http://test.ng/testmysql.php</code>访问，如果页面显示<code>The connection is successful.</code>那就代表成功了～，可以尽情的玩耍了～～。</p><h2 id="Mysql8-0更改默认密码验证方式的导致PHP连接报错的问题"><a href="#Mysql8-0更改默认密码验证方式的导致PHP连接报错的问题" class="headerlink" title="Mysql8.0更改默认密码验证方式的导致PHP连接报错的问题"></a>Mysql8.0更改默认密码验证方式的导致PHP连接报错的问题</h2><p>我在使用<code>Mysql8.0</code>版本的镜像来配置时，发现<code>PHP</code>默认的配置不能登录到<code>Mysql</code>，导致连接报错，原来是<code>Mysql8.0</code>改了密码验证方式，如果想要正常连接，需要在<code>Mysql</code>数据库中把要登陆的用户密码的验证方式从<code>caching_sha2_password</code>改为<code>mysql_native_password</code>，这里就不费那个劲了，练习环境<code>5.7</code>版本的<code>Mysql</code>就可以了～</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/11/06/基于Docker搭建LNPM环境/docker.png&quot; title=&quot;Docker&quot;&gt;
&lt;!-- ![Docker](./docker.png) --&gt;
&lt;h1 id=&quot;基于Docker搭建LNPM环境&quot;&gt;&lt;a href=&quot;#基于Docker搭建LNPM环境&quot; class=&quot;headerlink&quot; title=&quot;基于Docker搭建LNPM环境&quot;&gt;&lt;/a&gt;基于Docker搭建LNPM环境&lt;/h1&gt;&lt;p&gt;​    作为一只iOS前端工程师，最近对PHP产生了兴趣，我认为这不属于不务正业，作为一个程序员不应该把自己局限在一个封闭的领域当中，应该时刻保持好奇心，所以我对&lt;code&gt;“世界上最好的语言”&lt;/code&gt;开始了探索～&lt;/p&gt;
&lt;p&gt;​    工欲善其事，必先利其器，首先就要搭建开发环境，由于本人不喜欢因为开发环境把自己的电脑搞得乱七八糟，乱安装一些有的没的依赖开发包，所以我选择&lt;code&gt;虚拟机+Docker&lt;/code&gt;来搭建环境～&lt;/p&gt;
&lt;p&gt;​    下面我们开始：&lt;/p&gt;
&lt;h2 id=&quot;Docker准备&quot;&gt;&lt;a href=&quot;#Docker准备&quot; class=&quot;headerlink&quot; title=&quot;Docker准备&quot;&gt;&lt;/a&gt;Docker准备&lt;/h2&gt;&lt;p&gt;​      我选择了完全兼容&lt;code&gt;Redhat&lt;/code&gt;系统的&lt;code&gt;CentOS7&lt;/code&gt;发行版&lt;code&gt;Linux&lt;/code&gt;系统，下载&lt;code&gt;Linux&lt;/code&gt;并且虚拟机安装系统这里就省略了，准备好&lt;code&gt;Linux&lt;/code&gt;系统就可以开始安装&lt;code&gt;Docker&lt;/code&gt;了。&lt;/p&gt;
&lt;h3 id=&quot;删除旧版本&quot;&gt;&lt;a href=&quot;#删除旧版本&quot; class=&quot;headerlink&quot; title=&quot;删除旧版本&quot;&gt;&lt;/a&gt;删除旧版本&lt;/h3&gt;&lt;p&gt;如果以前安装过想重新安装新版本请先使用下面的命令卸载旧版本的&lt;code&gt;Docker&lt;/code&gt;，第一次安装请直接到第二步&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt; sudo yum remove docker \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  docker-client \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  docker-client-latest \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  docker-common \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  docker-latest \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  docker-latest-logrotate \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  docker-logrotate \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  docker-selinux \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  docker-engine-selinux \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  docker-engine&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="后端技术" scheme="http://softdevblog.com/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="PHP" scheme="http://softdevblog.com/tags/PHP/"/>
    
      <category term="Docker" scheme="http://softdevblog.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://softdevblog.com/2018/10/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://softdevblog.com/2018/10/24/正则表达式/</id>
    <published>2018-10-24T15:04:05.000Z</published>
    <updated>2018-11-06T12:04:47.664Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/10/24/正则表达式/regexp.jpg" title="正则表达式"><p><strong>个人根据《正则指引》内容总结记录，侵删！！</strong></p><p>最近看了编译原理方面的书，觉得正则表达式非常重要，在各个语言当中都有支持，所以总结了这篇文章，作为学习总结以及记录～</p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p><code>Regular Expression</code> 即描述某种规则的表达式。</p><h2 id="字符组"><a href="#字符组" class="headerlink" title="字符组"></a>字符组</h2><h3 id="普通字符组"><a href="#普通字符组" class="headerlink" title="普通字符组"></a>普通字符组</h3><p>字符组（<code>Character Class</code>）是一组字符，表示 “<strong>在同一个位置可能出现的各种字符</strong>”</p><p>其写法是在一对方括号<code>[</code>和<code>]</code>之间列出所有可能出现的字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#只要字符串中包含数字、字符就可以匹配</span></span><br><span class="line">re.search(<span class="string">"[0123456789]"</span>,<span class="string">"2"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br></pre></td></tr></table></figure><p>默认情况下<code>re.search(pattern,string)</code>只判断<code>string</code>的某个子串能否由<code>pattern</code>匹配，为了测试整个<code>string</code>能否被<code>pattern</code>匹配，在<code>pattern</code>两端加上<code>^</code>和 <code>$</code>。它们并不匹配任何字符，只表示“定位到字符串的起始位置”和“定位到字符串的结束位置”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用^和$测试string被pattern完整匹配</span></span><br><span class="line"><span class="comment">#只要字符串中包含数字、字符就可以匹配</span></span><br><span class="line">re.search(<span class="string">"[0123456789]"</span>,<span class="string">"2"</span>) != <span class="keyword">None</span> <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">"[0123456789]"</span>,<span class="string">"a2"</span>) != <span class="keyword">None</span> <span class="comment">#=&gt;True</span></span><br><span class="line"><span class="comment">#整个字符串就是一个数字字符，才可以匹配</span></span><br><span class="line">re.search(<span class="string">"^[0123456789]$"</span>,<span class="string">"2"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">"^[0123456789]$"</span>,<span class="string">"12"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br></pre></td></tr></table></figure><p>字符组中的字符排列<strong>顺序</strong>并不影响字符组的功能，出现<strong>重复</strong>字符也不影响，但是并不推荐在字符组中出现重复字符。</p><a id="more"></a><p>例如上例中匹配数字就要把所有数字都列出来还是有些繁琐，为此正则表达式提供了<strong>范围表示法</strong>（<code>range</code>）,它更直观，能进一步简化字符组。</p><p>在字符组中<code>-</code>表示范围，一般是根据字符对应的码值（<code>Code Point</code>）也就是字符在对应码表中的编码数值来确定的。小的在前，大的在后，所以<code>[0-9]</code>正确，而<code>[9-0]</code>会报错。</p><p>在字符组中可以同时并列多个<code>-范围表示法</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#[0-9a-fA-F]准确判断十六进制字符</span></span><br><span class="line">re.search(<span class="string">"^[0-9a-fA-F]$"</span>,<span class="string">"0"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">"^[0-9a-fA-F]$"</span>,<span class="string">"c"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">"^[0-9a-fA-F]$"</span>,<span class="string">"i"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br></pre></td></tr></table></figure><p>还可以用转义序列<code>\xhex</code>来表示一个字符，其中<code>\x</code>是固定前缀。字符组中有时会出现这种表示法，它可以表现一些难以输入或者难以显示的字符。依靠这种表示法可以很方便的匹配所有的中文字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#[\x00-\x7F]准确判断ASCII字符</span></span><br><span class="line">re.search(<span class="string">"^[\x00-\x7F]$"</span>,<span class="string">"c"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">"^[\x00-\x7F]$"</span>,<span class="string">"I"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">"^[\x00-\x7F]$"</span>,<span class="string">"&lt;"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">"^[\x00-\x7F]$"</span>,<span class="string">"0"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br></pre></td></tr></table></figure><h3 id="元字符与转义"><a href="#元字符与转义" class="headerlink" title="元字符与转义"></a>元字符与转义</h3><p>字符组中的<code>-</code>并不能匹配横线字符，这类字符叫做<strong>元字符</strong>。<code>[</code>、<code>]</code>、<code>^</code>、<code>$</code>都算元字符。</p><p><strong>如果<code>-</code>紧邻字符组中的<code>[</code>那么它就是普通字符，其他情况都是元字符。</strong></p><p>取消特殊含义的做法是在元字符前加上反斜杠<code>\</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#作为普通字符</span></span><br><span class="line">re.search(<span class="string">"^[-09]$"</span>,<span class="string">"3"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">"^[-09]$"</span>,<span class="string">"-"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line"><span class="comment">#作为元字符</span></span><br><span class="line">re.search(<span class="string">"^[0-9]$"</span>,<span class="string">"3"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">"^[0-9]$"</span>,<span class="string">"-"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line"><span class="comment">#转义之后作为普通字符</span></span><br><span class="line">re.search(<span class="string">"^[0\\-9]$"</span>,<span class="string">"3"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">"^[0\\-9]$"</span>,<span class="string">"-"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br></pre></td></tr></table></figure><p>这段例子中，正则表达式是以字符串的方式传入的，而字符串本身也有关于转义的规定，所以要加<strong>两个反斜杠</strong><code>\\</code>。</p><p>针对这种问题<code>Python</code>提供了<strong>原生字符串（Raw String）</strong>,不需要考虑正则表达式之外的转义（只有<strong>双引号是例外</strong>，必须转义成<code>\&quot;</code>）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#原生字符串的使用</span></span><br><span class="line"><span class="string">r"^[0\-9]$"</span> == <span class="string">"^[0\\-9]$"</span><span class="comment">#=&gt;True</span></span><br><span class="line"><span class="comment">#原生字符串的转义要简单许多</span></span><br><span class="line">re.search(<span class="string">r"^[0\-9]$"</span>,<span class="string">"3"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^[0\-9]$"</span>,<span class="string">"-"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#]出现的位置不同含义不同</span></span><br><span class="line"><span class="comment">#未转义的]</span></span><br><span class="line">re.search(<span class="string">r"^[012]345$"</span>,<span class="string">"2345"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^[012]345]$"</span>,<span class="string">"5"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^[012]345]$"</span>,<span class="string">"]"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line"><span class="comment">#转义的]</span></span><br><span class="line">re.search(<span class="string">r"^[012\]345]$"</span>,<span class="string">"2345"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^[012\]345]$"</span>,<span class="string">"5"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^[012\]345]$"</span>,<span class="string">"]"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br></pre></td></tr></table></figure><p><strong>请注意，只有开方括号<code>[</code>需要转义，闭方括号<code>]</code>不用。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#取消其他元字符的特殊含义</span></span><br><span class="line">re.search(<span class="string">r"^[012]345]$"</span>,<span class="string">"3"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^[012\\]345]$"</span>,<span class="string">"3"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^[012]$"</span>,<span class="string">"[012]"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^\[012]$"</span>,<span class="string">"[012]"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br></pre></td></tr></table></figure><h3 id="排除型字符组"><a href="#排除型字符组" class="headerlink" title="排除型字符组"></a>排除型字符组</h3><p>排除型字符组（Negated Character Class）只是在<strong>方括号<code>[</code>之后紧跟一个脱字符`^</strong><code>，所以</code>[^0-9]<code>表示</code>0-9`之外的字符，也就是“非数字字符”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用排除型字符组</span></span><br><span class="line">re.search(<span class="string">r"^[^0-9][0-9]$"</span>,<span class="string">"A8"</span>) != <span class="keyword">None</span>                        <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^[^0-9][0-9]$"</span>,<span class="string">"x6"</span>) != <span class="keyword">None</span>                        <span class="comment">#=&gt;True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#排除型字符组必须匹配一个字符</span></span><br><span class="line">re.search(<span class="string">r"^[0-9][0-9]$"</span>,<span class="string">"8"</span>) != <span class="keyword">None</span>                          <span class="comment">#=&gt;False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#排除型字符组中，紧跟在"^"之后的一个"-"不是元字符</span></span><br><span class="line"><span class="comment">#匹配一个"-"、"0"、"9"之外的字符</span></span><br><span class="line">re.search(<span class="string">r"^[^0-9]$"</span>,<span class="string">"-"</span>) != <span class="keyword">None</span>                              <span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^[^-09]$"</span>,<span class="string">"8"</span>) != <span class="keyword">None</span>                              <span class="comment">#=&gt;True</span></span><br></pre></td></tr></table></figure><p>在排除型字符组中，<code>^</code>是一个元字符，但<strong>只有它紧跟在<code>[</code>之后时才是元字符</strong>，如果想表示这个字符组中可以出现<code>^</code>字符，不要让它紧挨着<code>[</code>，否则要转义。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#匹配4个字符之一:"0","^","1","2"</span></span><br><span class="line">re.search(<span class="string">r"^[0^12]$"</span>,<span class="string">"^"</span>) != <span class="keyword">None</span>                              <span class="comment">#=&gt;True</span></span><br><span class="line"><span class="comment">#"^"紧跟在"["之后，但经过转义变为普通字符，等于上一个表达式，不推荐。</span></span><br><span class="line">re.search(<span class="string">r"^[\^012]$"</span>,<span class="string">"^"</span>) != <span class="keyword">None</span>                             <span class="comment">#=&gt;True</span></span><br></pre></td></tr></table></figure><h3 id="字符组的简记法"><a href="#字符组的简记法" class="headerlink" title="字符组的简记法"></a>字符组的简记法</h3><p>字符组间记法（shorthands）：对于常用的表示数字字符、小写字母这类字符组提供的简单记法。</p><p>常见的有<code>\d</code>、<code>\w</code>、<code>\s</code>，其中<code>\d</code>等价于<code>[0-9]</code>，<code>d</code>代表“数字（digit）”；<code>\w</code>等价于<code>[0-9a-zA-Z_]</code>，<code>w</code>代表“单词（word）”；<code>\s</code>等价于<code>[ \t\r\n\v\f]</code>(第一个字符是空格)，<code>s</code>代表“空白字符（space）”。（<strong>这些等价前提是采用ASCII匹配规则，采用Unicode匹配规则就不对了</strong>）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果没有原声字符串\d就必须写作\\d</span></span><br><span class="line">re.search(<span class="string">r"^\d$"</span>,<span class="string">"8"</span>) != <span class="keyword">None</span>                                  <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\d$"</span>,<span class="string">"a"</span>) != <span class="keyword">None</span>                                  <span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^\w$"</span>,<span class="string">"8"</span>) != <span class="keyword">None</span>                                  <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\w$"</span>,<span class="string">"a"</span>) != <span class="keyword">None</span>                                  <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\w$"</span>,<span class="string">"_"</span>) != <span class="keyword">None</span>                                  <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\s$"</span>,<span class="string">" "</span>) != <span class="keyword">None</span>                                  <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\s$"</span>,<span class="string">"\t"</span>) != <span class="keyword">None</span>                                 <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\s$"</span>,<span class="string">"\n"</span>) != <span class="keyword">None</span>                                 <span class="comment">#=&gt;True</span></span><br></pre></td></tr></table></figure><p><strong><code>\w</code>能匹配下划线<code>_</code>。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字符组简记法与普通字符组混用</span></span><br><span class="line"><span class="comment">#用在普通字符组内部</span></span><br><span class="line">re.search(<span class="string">r"^[\da-zA-Z]$"</span>,<span class="string">"8"</span>) != <span class="keyword">None</span>                          <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^[\da-zA-Z]$"</span>,<span class="string">"a"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^[\da-zA-Z]$"</span>,<span class="string">"c"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用在排除型字符组内部</span></span><br><span class="line">re.search(<span class="string">r"^[^\w]$"</span>,<span class="string">"8"</span>) != <span class="keyword">None</span>                               <span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^[^\w]$"</span>,<span class="string">"_"</span>) != <span class="keyword">None</span>                               <span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^[^\w]$"</span>,<span class="string">","</span>) != <span class="keyword">None</span>                               <span class="comment">#=&gt;True</span></span><br></pre></td></tr></table></figure><p>相对于<code>\d</code>、<code>\w</code>和<code>\s</code>这三个普通字符组简记法，正则表达式也提供了对应的排除型字符组的简记法：<code>\D</code>、<code>\W</code>和<code>\S</code>——字母完全一样，只是改为大写。</p><p>这些简记法匹配字符互补：<code>\s</code>能匹配的字符，<code>\S</code>一定不能匹配，其他同理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#\d和\D</span></span><br><span class="line">re.search(<span class="string">r"^\d$"</span>,<span class="string">"8"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\d$"</span>,<span class="string">"a"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^\D$"</span>,<span class="string">"8"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^\D$"</span>,<span class="string">"a"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#\w和\W</span></span><br><span class="line">re.search(<span class="string">r"^\w$"</span>,<span class="string">"c"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\w$"</span>,<span class="string">"!"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^\W$"</span>,<span class="string">"c"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;False</span></span><br><span class="line">re,search(<span class="string">r"^\W$"</span>,<span class="string">"!"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#\s和\S</span></span><br><span class="line">re.search(<span class="string">r"^\s$"</span>,<span class="string">"\t"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\s$"</span>,<span class="string">"0"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^\S$"</span>,<span class="string">"\t"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^\S$"</span>,<span class="string">"0"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;True</span></span><br></pre></td></tr></table></figure><h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><h3 id="一般形式"><a href="#一般形式" class="headerlink" title="一般形式"></a>一般形式</h3><p>字符组只能匹配单个字符，为此正则表达式提供了<strong>量词（quantifier）</strong>，来支持匹配多个字符的功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#重复确定次数的量词</span></span><br><span class="line">re.search(<span class="string">r"^\d&#123;6&#125;$"</span>,<span class="string">"100859"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\d&#123;6&#125;$"</span>,<span class="string">"20103"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br></pre></td></tr></table></figure><p>量词还可以表示不确定的长度，其通用形式是<code>{m,n}</code>，其中<code>m</code>和<code>n</code>是两个数字（<strong>逗号之后绝不能有空格</strong>），它限定之前的元素能够出现的次数,<code>m</code>是下限，<code>n</code>是上限（均为闭区间）。如果不确定长度的上限，也可以省略，写成<code>\d{m,}</code>。量词限定一般都有明确的下限，如果没有，则默认为0。有些语言支持<code>{,n}</code>的记法，省略下限为0的情况，但这种用法并不是所有语言都通用的，<strong>最好使用<code>{0,n}</code>的记法</strong>。</p><table><thead><tr><th>量词</th><th>说明</th></tr></thead><tbody><tr><td>{n}</td><td>之前的元素必须出现n次</td></tr><tr><td>{m,n}</td><td>之前的元素最少出现m次，最多出现n次</td></tr><tr><td>{m,}</td><td>之前的元素最少出现m次，出现次数无上限</td></tr><tr><td>{0,n}</td><td>之前的元素可以不出现，也可以出现，最多出现n次（在某些语言中可以写为{,n}）</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#表示不确定长度的量词</span></span><br><span class="line">re.search(<span class="string">r"^\d&#123;4,6&#125;$"</span>,<span class="string">"123"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^\d&#123;4,5&#125;$"</span>,<span class="string">"1234"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\d&#123;4,6&#125;$"</span>,<span class="string">"123456"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\d&#123;4,6&#125;$"</span>,<span class="string">"1234567"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^\d&#123;4,&#125;$"</span>,<span class="string">"123"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^\d&#123;4,&#125;$"</span>,<span class="string">"1234"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\d&#123;4,&#125;"</span>,<span class="string">"123456"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\d&#123;0,6&#125;$"</span>,<span class="string">"12345"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\d&#123;0,6&#125;$"</span>,<span class="string">"123456"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\d&#123;0,6&#125;$"</span>,<span class="string">"1234567"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br></pre></td></tr></table></figure><h3 id="常用量词"><a href="#常用量词" class="headerlink" title="常用量词"></a>常用量词</h3><p><code>{m,n}</code>是通用形式的量词，正则表达式还有三个常用量词，分别是<code>+</code>、<code>?</code>、<code>*</code>。它们形态虽然不同于<code>{m,n}</code>,功能却相同。（可以理解为“量词简记法”）</p><table><thead><tr><th>常用量词</th><th>{m,n}等价形式</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>{0,}</td><td>可能出现，也可能不出现，出现次数没有上限</td></tr><tr><td>+</td><td>{1,}</td><td>至少出现1次，出现次数没有上限</td></tr><tr><td>?</td><td>{0,1}</td><td>至多出现1次，也可能不出现</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#量词?的应用</span></span><br><span class="line">re.search(<span class="string">r"^travell?er$"</span>,<span class="string">"traveler"</span>) != <span class="keyword">None</span>                   <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^travell?er$"</span>,<span class="string">"traveller"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#量词+的应用</span></span><br><span class="line">re.search(<span class="string">r"^&lt;[^&gt;]+&gt;$"</span>,<span class="string">"&lt;bold&gt;"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^&lt;[^&gt;]+&gt;$"</span>,<span class="string">"&lt;/table&gt;"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^&lt;[^&gt;]+&gt;$"</span>,<span class="string">"&lt;&gt;"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#量词*的使用</span></span><br><span class="line">re.search(<span class="string">r"^\"[^\"]*\"$"</span>,<span class="string">"\"some\""</span>) != <span class="keyword">None</span>                <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\"[^\"]*\"$"</span>,<span class="string">"\"\""</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br></pre></td></tr></table></figure><h3 id="点号"><a href="#点号" class="headerlink" title="点号"></a>点号</h3><p>一般文档都说点号可以匹配“任意字符”，但是换行符<code>\n</code>不能匹配，如果非要匹配”任意字符”，有两种办法：可以使用单行匹配；或者使用<code>[\s\S]</code>（也可以使用<code>[\w\W]</code>、<code>[\d\D]</code>）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#点号.的匹配</span></span><br><span class="line">re.search(<span class="string">r"^.$"</span>,<span class="string">"a"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^.$"</span>,<span class="string">"0"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^.$"</span>,<span class="string">"*"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#换行符的匹配</span></span><br><span class="line">re.search(<span class="string">r"^.$"</span>,<span class="string">"\n"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;False</span></span><br><span class="line"><span class="comment">#单行匹配</span></span><br><span class="line">re.search(<span class="string">r"(?s)^.$"</span>,<span class="string">"\n"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^[\s\S]$"</span>,<span class="string">"\n"</span>) != <span class="keyword">None</span>        <span class="comment">#=&gt;True</span></span><br></pre></td></tr></table></figure><h3 id="贪婪与懒惰"><a href="#贪婪与懒惰" class="headerlink" title="贪婪与懒惰"></a>贪婪与懒惰</h3><p>当使用量词匹配字符串有时会出现意料之外的错误情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字符串的值是"quoted string"</span></span><br><span class="line">print(re.search(<span class="string">r"\".*\""</span>,<span class="string">"\"quoted string\""</span>).group())</span><br><span class="line"><span class="string">"quoted string"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串的值是"string" and another"</span></span><br><span class="line">print(re.search(<span class="string">r"\".*\""</span>,<span class="string">"\"quoted string\" and another\""</span>).group())</span><br><span class="line"><span class="string">"quoted string"</span> <span class="keyword">and</span> anothe<span class="string">r"</span></span><br></pre></td></tr></table></figure><p>我们只想匹配<code>&quot;quoted string&quot;</code>但是下面的语句匹配到了错误的<code>&quot;quoted string&quot; and another&quot;</code>，这是因为默认的量词匹配采用<strong>贪婪规则</strong>。就是在拿不准是否要匹配时，先尝试匹配，并且记下这个状态，以备将来”反悔”。这个“反悔”的过程叫做<strong>回溯（backtracking）</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#准确匹配双引号字符串，采用懒惰规则</span></span><br><span class="line">print(re.search(<span class="string">r"\".*?\""</span>,<span class="string">"\"quoted string\" and another\""</span>).group())</span><br><span class="line"><span class="string">"quoted string"</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>贪婪匹配量词</th><th>懒惰匹配量词</th><th>限定次数</th></tr></thead><tbody><tr><td>*</td><td>*?</td><td>可能不出现，也可能出现，出现次数没有上限</td></tr><tr><td>+</td><td>+?</td><td>至少出现1次，出现次数没有上限</td></tr><tr><td>?</td><td>??</td><td>至多出现1次，也可能不出现</td></tr><tr><td>{m,n}</td><td>{m,n}?</td><td>出现次数最少为m次，最多为n次</td></tr><tr><td>{m,}</td><td>{m,}?</td><td>出现次数最少为m次，没有上限</td></tr><tr><td>{,n}</td><td>{,n}?</td><td>可能不出现，也可能出现，最多出现n次</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">jsStr = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;script type="text/javascript"&gt;</span></span><br><span class="line"><span class="string">alert("1");</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;br /&gt;</span></span><br><span class="line"><span class="string">&lt;script type="text/javascript"&gt;</span></span><br><span class="line"><span class="string">alert("2");</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#贪婪匹配</span></span><br><span class="line">jsRegex = <span class="string">r"&lt;script type=\"text/javascript\"&gt;[\s\S]*&lt;/script&gt;"</span></span><br><span class="line">print(re.search(jsRegex,jsStr).group())</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&lt;script type="text/javascript"&gt;</span></span><br><span class="line"><span class="string">alert("1");</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;br /&gt;</span></span><br><span class="line"><span class="string">&lt;script type="text/javascript"&gt;</span></span><br><span class="line"><span class="string">alert("2");</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#懒惰匹配</span></span><br><span class="line">jsRegex = <span class="string">r"&lt;script type=\"text/javascript\"&gt;[\s\S]*?&lt;/script&gt;"</span></span><br><span class="line">print(re.search(jsRegex,jsStr).group())</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&lt;script type="text/javascript"&gt;</span></span><br><span class="line"><span class="string">alert("1");</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>各种量词的转义形式</p><table><thead><tr><th>量词</th><th>转义形式</th></tr></thead><tbody><tr><td>{n}</td><td>\{n}</td></tr><tr><td>{m,n}</td><td>\{m,n}</td></tr><tr><td>{m,}</td><td>\{m,}</td></tr><tr><td>{,n}</td><td>\{,n}</td></tr><tr><td>*</td><td>\*</td></tr><tr><td>+</td><td>\+</td></tr><tr><td>?</td><td>\?</td></tr><tr><td>*?</td><td>\*\?</td></tr><tr><td>+?</td><td>\+\?</td></tr><tr><td>??</td><td>\?\?</td></tr><tr><td>.</td><td>\.</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#忽略转义点号可能导致错误</span></span><br><span class="line"><span class="comment">#错误判断浮点数</span></span><br><span class="line">re.search(<span class="string">r"^\d+.\d+$"</span>,<span class="string">"3.14"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\d+.\d+$"</span>,<span class="string">"3a14"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#准确判断浮点数</span></span><br><span class="line">re.search(<span class="string">r"^\d+\.\d+$"</span>,<span class="string">"3.14"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\d+\.\d+$"</span>,<span class="string">"3a14"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br></pre></td></tr></table></figure><h2 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h2><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>使用括号<code>()</code>可以将一个字符、字符组或表达式包围起来作为一个整体，再用量词限定它们出现的次数，这种功能叫做<strong>分组</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用括号改变量词的作用元素</span></span><br><span class="line">re.search(<span class="string">r"^ab+$"</span>,<span class="string">"ab"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^ab+$"</span>,<span class="string">"abb"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^ab+$"</span>,<span class="string">"abab"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^(ab)+$"</span>,<span class="string">"ab"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^(ab)+$"</span>,<span class="string">"abb"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^(ab)+$"</span>,<span class="string">"abab"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#身份证号码的准确匹配</span></span><br><span class="line"><span class="string">r"^[1-9]\d&#123;14&#125;(\d&#123;2&#125;[0-9xX])?$"</span></span><br></pre></td></tr></table></figure><h3 id="多选结构"><a href="#多选结构" class="headerlink" title="多选结构"></a>多选结构</h3><p>多选结构的形式是<code>(...|…)</code>,在括号内以竖线<code>|</code>分隔开多个子表达式，这些表达式也叫<strong>多选分支（option）</strong>；在一个多选结构内，多选分支的数目没有限制。在匹配时，整个多选结构被视为单个元素，只要其中某个子表达式能够匹配，整个多选结构的匹配就成功了；如果所有子表达式都不能匹配，则整个多选结构匹配失败。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用多选结构匹配身份证号码</span></span><br><span class="line"><span class="string">r"^([1-9\d&#123;14&#125;|[1-9]&#123;16&#125;[0-9xX]])$"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#准确匹配0-255之间的字符串</span></span><br><span class="line"><span class="string">r"^([0-9]|[0-9]&#123;2&#125;|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$"</span></span><br></pre></td></tr></table></figure><p>多选结构的补充：</p><p>第一、多选结构一般会同时使用括号<code>()</code>和竖线<code>|</code>；但是没有括号<code>()</code>，只出现竖线<code>|</code>，仍然是多选结构。</p><p>第二、多选结构并不等于字符组。字符组匹配要比多选结构效率高很多，字符组只能匹配单个字符，多选结构的每个分支长度没有限制。</p><p>第三、多选结构应当避免某段文字可以被多个分支同时匹配的情况，这将大大增加回溯的计算量，影响效率。如果遇到多个分支都能匹配的字符串，大多数语言优先匹配左侧分支。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#多选结构的匹配顺序</span></span><br><span class="line">re.search(<span class="string">r"^jeffrey|jeff$"</span>,<span class="string">"jeffrey"</span>).group()</span><br><span class="line"><span class="string">'jeffrey'</span></span><br><span class="line">re.search(<span class="string">r"^jeff|jeffrey$"</span>,<span class="string">"jeffrey"</span>).group()</span><br><span class="line"><span class="string">'jeff'</span></span><br></pre></td></tr></table></figure><h3 id="引用分组"><a href="#引用分组" class="headerlink" title="引用分组"></a>引用分组</h3><p>使用括号之后，正则表达式会保存每个分组真正匹配的文本，等到匹配完成后，通过<strong>group(num)</strong>之类的方法”引用”分组在匹配时捕获的内容。其中<em>num</em>表示对应括号的编号，<strong>无论括号如何嵌套，分组编号都是根据开括号出现的顺序来计数的</strong>；开括号是从左到右数起第多少个开括号，整个括号分组的编号就是多少。编号从1开始计数，不过也有0号分组，它是默认存在的，对应整个表达式匹配的文本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#引用捕获分组</span></span><br><span class="line">re.search(<span class="string">r"(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)"</span>,<span class="string">"2018-10-24"</span>).group()</span><br><span class="line"><span class="string">'2018-10-24'</span></span><br><span class="line">re.search(<span class="string">r"(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)"</span>,<span class="string">"2018-10-24"</span>).group(<span class="number">0</span>)</span><br><span class="line"><span class="string">'2018-10-24'</span></span><br><span class="line">re.search(<span class="string">r"(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)"</span>,<span class="string">"2018-10-24"</span>).group(<span class="number">1</span>)</span><br><span class="line"><span class="string">'2018'</span></span><br><span class="line">re.search(<span class="string">r"(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)"</span>,<span class="string">"2018-10-24"</span>).group(<span class="number">2</span>)</span><br><span class="line"><span class="string">'10'</span></span><br><span class="line">re.search(<span class="string">r"(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)"</span>,<span class="string">"2018-10-24"</span>).group(<span class="number">3</span>)</span><br><span class="line"><span class="string">'24'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#嵌套的括号</span></span><br><span class="line">nestedGroupingRegex = <span class="string">r"(((\d&#123;4&#125;)-(\d&#123;2&#125;))-(\d&#123;2&#125;))"</span></span><br><span class="line">re.search(nestedGroupingRegex,<span class="string">"2018-10-24"</span>).group(<span class="number">0</span>)</span><br><span class="line"><span class="string">'2018-10-24'</span></span><br><span class="line">re.search(nestedGroupingRegex,<span class="string">"2018-10-24"</span>).group(<span class="number">1</span>)</span><br><span class="line"><span class="string">'2018-10-24'</span></span><br><span class="line">re.search(nestedGroupingRegex,<span class="string">"2018-10-24"</span>).group(<span class="number">2</span>)</span><br><span class="line"><span class="string">'2018-10'</span></span><br><span class="line">re.search(nestedGroupingRegex,<span class="string">"2018-10-24"</span>).group(<span class="number">3</span>)</span><br><span class="line"><span class="string">'2018'</span></span><br><span class="line">re.search(nestedGroupingRegex,<span class="string">"2018-10-24"</span>).group(<span class="number">4</span>)</span><br><span class="line"><span class="string">'10'</span></span><br><span class="line">re.search(nestedGroupingRegex,<span class="string">"2018-10-24"</span>).group(<span class="number">5</span>)</span><br><span class="line"><span class="string">'24'</span></span><br></pre></td></tr></table></figure><p>容易错误的情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#容易弄错的分组的结构</span></span><br><span class="line">re.search(<span class="string">r"^(\d)&#123;4&#125;-(\d&#123;2&#125;)-(\d&#123;2&#125;)$"</span>,<span class="string">"2018-10-24"</span>).group(<span class="number">1</span>)</span><br><span class="line"><span class="string">'8'</span></span><br></pre></td></tr></table></figure><p>这个表达式中编号为1的括号是<code>(\d)</code>，其中<code>\d</code>是“匹配一个数字字符“的子表达式，因为之后有量词<code>{4}</code>，所以整个括号作为单个元素，要重复4次，而且编号都是1；于是每重复一次，就要更新一次匹配结果。所以在匹配过程中，编号为1的分组匹配文本的值，依次是<code>2</code>、<code>0</code>、<code>1</code>、<code>0</code>，最后的结果是0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#正则表达式的替换</span></span><br><span class="line">re.sub(<span class="string">r"[a-z]"</span>,<span class="string">" "</span>,<span class="string">"1a2b3c"</span>)</span><br><span class="line"><span class="string">'1 2 3 '</span></span><br><span class="line"><span class="comment">#在替换中使用分组</span></span><br><span class="line">re.sub(<span class="string">r"(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)"</span>,<span class="string">r"\2/\3/\1"</span>,<span class="string">"2018-10-24"</span>)</span><br><span class="line"><span class="string">'10/24/2018'</span></span><br><span class="line">re.sub(<span class="string">r"(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)"</span>,<span class="string">r"\1年\2月\3日"</span>,<span class="string">"2018-10-24"</span>)</span><br><span class="line"><span class="string">'2018年10月24日'</span></span><br></pre></td></tr></table></figure><h3 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h3><p><strong>反向引用（back-reference）</strong>它允许在正则表达式内部引用之前的捕获分组匹配的文本（也就是左侧），其形式也是<em>\num</em>,其中<em>num</em>表示所引用分组的编号，编号规则与之前介绍的相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用反向引用匹配重复字符</span></span><br><span class="line">re.search(<span class="string">r"^([a-z])\1$"</span>,<span class="string">"aa"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^([a-z])\1$"</span>,<span class="string">"ac"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用反向引用匹配成对的tag</span></span><br><span class="line">pairedTagRegex = <span class="string">r"^&lt;([^&gt;]+)[\s\S]*?&lt;/\1&gt;$"</span></span><br><span class="line">re.search(pairedTagRegex,<span class="string">"&lt;h1&gt;title&lt;/h1&gt;"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(pairedTagRegex,<span class="string">"&lt;h1&gt;title&lt;/bold&gt;"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用反向引用匹配更复杂的成对tag</span></span><br><span class="line">pairedTagRegex = <span class="string">r"^&lt;([a-zA-Z0-9]+)(\s[^&gt;]+)?&gt;[\s\S]*?&lt;/\1&gt;$"</span></span><br><span class="line">re.search(pairedTagRegex,<span class="string">"&lt;h1&gt;title&lt;/h1&gt;"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(pairedTagRegex,<span class="string">"&lt;span class=\"class1\"&gt;text&lt;/span&gt;"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(pairedTagRegex,<span class="string">"&lt;h1&gt;title&lt;/bold&gt;"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br></pre></td></tr></table></figure><p>反向引用重复的是对应捕获分组匹配的文本，而不是之前的表达式；也就是说，反向引用的<strong>是由之前表达式决定的具体文本</strong>，而<strong>不是符合某种规则的位置文本</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#匹配IP地址的正则表达式</span></span><br><span class="line"><span class="comment">#匹配其中一段的表达式</span></span><br><span class="line">segment = <span class="string">r"(0&#123;0,2&#125;[0-9]|0?[0-9]&#123;2&#125;|1[0-9][0-9]|2[0-4][0-9]|25[0-5])"</span></span><br><span class="line"><span class="comment">#正确的表达式</span></span><br><span class="line">idAddressRegex = <span class="string">r"("</span> + segment + <span class="string">r"\.)&#123;3&#125;"</span> + segment</span><br><span class="line"><span class="comment">#错误的表达式</span></span><br><span class="line">idAddressRegex = segment + <span class="string">r"\.\1.\1.\1"</span></span><br></pre></td></tr></table></figure><h3 id="各种引用的记法"><a href="#各种引用的记法" class="headerlink" title="各种引用的记法"></a>各种引用的记法</h3><table><thead><tr><th>语言</th><th>表达式中的反向引用</th><th>替换中的反向引用</th></tr></thead><tbody><tr><td>.NET</td><td>\num</td><td>$num</td></tr><tr><td>Java</td><td>\num</td><td>$num</td></tr><tr><td>JavaScript</td><td>$num</td><td>$num</td></tr><tr><td>PHP</td><td>\num</td><td>\num或$num(PHP4.0.4以上版本)</td></tr><tr><td>Python</td><td>\num</td><td>\num</td></tr><tr><td>Ruby</td><td>\num</td><td>\num</td></tr></tbody></table><p>一般来说，$num要好于\num。原因在于，<strong>\$0</strong>可以准确表示“第0个分组”，而<strong>\0</strong>则不行，因为不少语言的字符串中，<strong>\num</strong>本身是一个有意义的转义序列，它表示值为<strong>num</strong>的ASCII字符，所以<strong>\0</strong>会被解释为“ASCII编码为0的字符”。但是反向引用不存在这个问题，因为不能在正则表达式还没匹配结束时，就用<strong>\0</strong>引用整个表达式匹配的文本。</p><p>但是无论是<strong>\num</strong>还是<strong>$num</strong>，都有可能遇到二义性的问题：如果出现了<strong>\10</strong>（或者<strong>$10</strong>），它到底是表示第10个捕获分组，还是第1个捕获分组之后跟着一个字符0？</p><p>Python将<strong>\10</strong>解释成“第10个捕获分组匹配的文本”，如果想表示第1个分组之后跟一个0，需要消除二义性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用g&lt;n&gt;消除二义性</span></span><br><span class="line">re.sub(<span class="string">r"(\d)"</span>,<span class="string">r"\g&lt;1&gt;0"</span>,<span class="string">"123"</span>)</span><br><span class="line"><span class="string">'102030'</span></span><br></pre></td></tr></table></figure><p>Python和PHP的规定明确，所以避免了<strong>\num</strong>的二义性；Java、Ruby、Javascript这样规定<strong>\num</strong>，如果一位数，则引用对应的捕获分组；如果是两位数且存在对应的捕获分组时，引用对应的捕获分组，如果不存在则引用一位数编号的捕获分组。这样如果存在编号为10的捕获分组，无法用<strong>\10</strong>表示“编号为1的捕获分组和字符0”，如果在开发中遇到这个问题，现有规则下无解，但可以使用明明分组解决此问题。</p><h3 id="命名分组"><a href="#命名分组" class="headerlink" title="命名分组"></a>命名分组</h3><p>为了解决捕获分组数字编号不够直观和会引起冲突的问题，一些语言提供了<strong>命名分组（named grouping）</strong>。</p><p>在Python中用<code>(?P&lt;name&gt;regex)</code>来分组，其中的<em>name</em>是赋予这个分组的名字，regex则是分组内的正则表达式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#命名分组捕获</span></span><br><span class="line">namedRegex = <span class="string">r"(?P&lt;year&gt;\d&#123;4&#125;)-(?P&lt;month&gt;\d&#123;2&#125;)-(?P&lt;day&gt;\d&#123;2&#125;)"</span></span><br><span class="line">result = re.search(namedRegex, <span class="string">"2018-10-24"</span>)</span><br><span class="line">print(result.group(<span class="string">"year"</span>))</span><br><span class="line"><span class="number">2018</span></span><br><span class="line">print(result.group(<span class="string">"month"</span>))</span><br><span class="line"><span class="number">10</span></span><br><span class="line">print(result.group(<span class="string">"day"</span>))</span><br><span class="line"><span class="number">24</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#命名分组捕获时仍然保留了数字编号</span></span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line"><span class="number">2018</span></span><br><span class="line">print(result.group(<span class="number">2</span>))</span><br><span class="line"><span class="number">10</span></span><br><span class="line">print(result.group(<span class="number">3</span>))</span><br><span class="line"><span class="number">24</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#命名分组的引用方法</span></span><br><span class="line">re.search(<span class="string">r"^(?P&lt;char&gt;[a-z])(?P=char)$"</span>,<span class="string">"aa"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.sub(<span class="string">"(?P&lt;digit&gt;\d)"</span>,<span class="string">r"\g&lt;digit&gt;0"</span>,<span class="string">"123"</span>)</span><br><span class="line"><span class="string">'102030'</span></span><br></pre></td></tr></table></figure><p>不同语言中命名分组的记法</p><table><thead><tr><th>语言</th><th>分组记法</th><th>表达式中的引用记法</th><th>替换时的引用记法</th></tr></thead><tbody><tr><td>.NET</td><td>(?<name>…)</name></td><td>\k<name></name></td><td>${name}</td></tr><tr><td>Java7开始支持</td><td>(?<name>…)</name></td><td>\k<name></name></td><td>${name}</td></tr><tr><td>PHP</td><td>(?P<name>…)</name></td><td>(?P=name)</td><td>不支持，只能使用\${<em>num</em>},其中<em>num</em><br>为对应分组的数字编号</td></tr><tr><td>Python</td><td>(?P<name>…)</name></td><td>(?P=name)</td><td>\g<name></name></td></tr><tr><td>Ruby</td><td>(?<name>…)</name></td><td>\k<name></name></td><td>\k<name></name></td></tr></tbody></table><h3 id="非捕获分组"><a href="#非捕获分组" class="headerlink" title="非捕获分组"></a>非捕获分组</h3><p>在使用分组时，只要出现了括号，正则表达式在匹配时就会把括号内的子表达式存储起来，提供引用。如果不需要引用，保存这些信息无疑会影响正则表达式的性能；如果表达式比较复杂，要处理的文本又很多，更可能严重影响性能。</p><p>为解决这种问题，提供了<strong>非捕获分组</strong>（non-capturing group），非捕获分组类似普通分组，只是在开括号后紧跟一个问号和冒号<code>(?:...)</code>，这样的括号叫做非捕获型括号。在引用分组时，分组的编号同样会按开括号的顺序从左到右递增，只不过<strong>必须以捕获分组为准，非捕获分组会掠过</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">re.search(<span class="string">r"(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)"</span>,<span class="string">"2018-10-24"</span>).group(<span class="number">1</span>)</span><br><span class="line"><span class="string">'2018'</span></span><br><span class="line">re.search(<span class="string">r"(?:\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)"</span>,<span class="string">"2018-10-24"</span>).group(<span class="number">1</span>)</span><br><span class="line"><span class="string">'10'</span></span><br></pre></td></tr></table></figure><h3 id="转义-1"><a href="#转义-1" class="headerlink" title="转义"></a>转义</h3><p>括号的转义必须转义与括号有关的所有元字符包括<code>(</code>、<code>)</code>和<code>|</code>。因为括号非常重要，所以无论时开括号还是闭括号，只要出现，正则表达式就会尝试寻找整个括号，如果只转义了开括号而没有转义闭括号，一般会报告”括号不匹配”的错误。另外，多选结构中的<code>|</code>也必须转义。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#括号的转义</span></span><br><span class="line">re.search(<span class="string">r"^\(a\)$"</span>,<span class="string">"(a)"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br><span class="line">re.search(<span class="string">r"^\(a)$"</span>,<span class="string">"(a)"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#未转义|</span></span><br><span class="line">re.search(<span class="string">r"^(\(a|b\))$"</span>,<span class="string">"(a|b)"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;False</span></span><br><span class="line">re.search(<span class="string">r"^(\(a\|b\))$"</span>,<span class="string">"(a|b)"</span>) != <span class="keyword">None</span><span class="comment">#=&gt;True</span></span><br></pre></td></tr></table></figure><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><p>正则表达式中的大多数的结构匹配的文本会出现在最终的匹配结果中，但是有些结构并不真正匹配文本，而只负责判断某个位置左/右侧的文本是否符合要求，这种结构被称为<strong>断言（assertion）</strong>。常见的断言有三类：<strong>单词边界、行起始/结束位置、环视</strong>。</p><p><em>待补充</em></p><p><strong>个人根据《正则指引》内容总结记录，侵删！！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/10/24/正则表达式/regexp.jpg&quot; title=&quot;正则表达式&quot;&gt;
&lt;p&gt;&lt;strong&gt;个人根据《正则指引》内容总结记录，侵删！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最近看了编译原理方面的书，觉得正则表达式非常重要，在各个语言当中都有支持，所以总结了这篇文章，作为学习总结以及记录～&lt;/p&gt;
&lt;h1 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Regular Expression&lt;/code&gt; 即描述某种规则的表达式。&lt;/p&gt;
&lt;h2 id=&quot;字符组&quot;&gt;&lt;a href=&quot;#字符组&quot; class=&quot;headerlink&quot; title=&quot;字符组&quot;&gt;&lt;/a&gt;字符组&lt;/h2&gt;&lt;h3 id=&quot;普通字符组&quot;&gt;&lt;a href=&quot;#普通字符组&quot; class=&quot;headerlink&quot; title=&quot;普通字符组&quot;&gt;&lt;/a&gt;普通字符组&lt;/h3&gt;&lt;p&gt;字符组（&lt;code&gt;Character Class&lt;/code&gt;）是一组字符，表示 “&lt;strong&gt;在同一个位置可能出现的各种字符&lt;/strong&gt;”&lt;/p&gt;
&lt;p&gt;其写法是在一对方括号&lt;code&gt;[&lt;/code&gt;和&lt;code&gt;]&lt;/code&gt;之间列出所有可能出现的字符。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#只要字符串中包含数字、字符就可以匹配&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;re.search(&lt;span class=&quot;string&quot;&gt;&quot;[0123456789]&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;) != &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;				&lt;span class=&quot;comment&quot;&gt;#=&amp;gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;默认情况下&lt;code&gt;re.search(pattern,string)&lt;/code&gt;只判断&lt;code&gt;string&lt;/code&gt;的某个子串能否由&lt;code&gt;pattern&lt;/code&gt;匹配，为了测试整个&lt;code&gt;string&lt;/code&gt;能否被&lt;code&gt;pattern&lt;/code&gt;匹配，在&lt;code&gt;pattern&lt;/code&gt;两端加上&lt;code&gt;^&lt;/code&gt;和 &lt;code&gt;$&lt;/code&gt;。它们并不匹配任何字符，只表示“定位到字符串的起始位置”和“定位到字符串的结束位置”。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#使用^和$测试string被pattern完整匹配&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#只要字符串中包含数字、字符就可以匹配&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;re.search(&lt;span class=&quot;string&quot;&gt;&quot;[0123456789]&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;) != &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt; 				&lt;span class=&quot;comment&quot;&gt;#=&amp;gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;re.search(&lt;span class=&quot;string&quot;&gt;&quot;[0123456789]&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;a2&quot;&lt;/span&gt;) != &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt; 				&lt;span class=&quot;comment&quot;&gt;#=&amp;gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#整个字符串就是一个数字字符，才可以匹配&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;re.search(&lt;span class=&quot;string&quot;&gt;&quot;^[0123456789]$&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;) != &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;				&lt;span class=&quot;comment&quot;&gt;#=&amp;gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;re.search(&lt;span class=&quot;string&quot;&gt;&quot;^[0123456789]$&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;12&quot;&lt;/span&gt;) != &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;			&lt;span class=&quot;comment&quot;&gt;#=&amp;gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;字符组中的字符排列&lt;strong&gt;顺序&lt;/strong&gt;并不影响字符组的功能，出现&lt;strong&gt;重复&lt;/strong&gt;字符也不影响，但是并不推荐在字符组中出现重复字符。&lt;/p&gt;
    
    </summary>
    
      <category term="基础知识" scheme="http://softdevblog.com/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="通用技术" scheme="http://softdevblog.com/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="正则表达式" scheme="http://softdevblog.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="通用技术" scheme="http://softdevblog.com/tags/%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
